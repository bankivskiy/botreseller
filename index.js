const VersionBot = `Version Bot v1 | Worked | Started at (Kyiv time) - ${new Date().toLocaleString('en-US', { timeZone: 'Europe/Kiev' })}`;
const InfoBot = `Made by Farrew | Help - @developer_telegram_bots (telegram) or farrew (discord)`;
const TelegramApi = require('node-telegram-bot-api')
const Token = '7371351845:AAHeM4gOn8YLcvsyNYhpUo9Nu6KNQz5p94w'
const bot = new TelegramApi(Token, {polling: true})
const { MongoClient, ObjectId } = require('mongodb')
console.log(VersionBot + `\n` + InfoBot)
const chatIdChannel = -1002014360743
const cron = require('node-cron');
let adminChatId
let menegerChatId
const uri = "mongodb+srv://feegff1:m2ekJMnzxpx5GvaB@resellerbot.mge61yy.mongodb.net/?retryWrites=true&w=majority&appName=reSellerBot";
const client = new MongoClient(uri);
const state = {}
let db

async function connectToMongoDB() {
    try {
        await client.connect();
        db = client.db("bot-Reseller");
        console.log("Connected to MongoDB");
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB: ${error}`);
    }
}
connectToMongoDB().then(()=> {

loadManagers()
loadAdmins()
checkHostingDates()
bot.onText(/\/start(.*)/, async (msg, match) => {
    const chatId = msg.chat.id
    const chatUn = msg.chat.username
    const referrerId = match[1].trim();
    if (referrerId) {
        if (!isNaN(referrerId) && referrerId !== '') {
            await addReferral(referrerId, chatId, chatUn);
        }
    }
    await createNewUser(chatId, chatUn)
    let language = await languageUser(chatId)
    let keyboard
    let message
    if (language === 'ru') {
        message = `üëä–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –í–∞—Å *${msg.from.first_name}* –≤ —Å–µ—Ä–≤–∏—Å–µ - @BuckCreatorBot

*ü¶æ –ù–∞—à –ø—Ä–æ–µ–∫—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –≤–∞–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å:*

üôå–°–æ–∑–¥–∞—Ç—å —Å–≤–æ–µ–≥–æ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –±–æ—Ç–∞, –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª–∏–∫–æ–≤.
üíª–ù–∞—à–∏ –±–æ—Ç—ã —Å–æ–∑–¥–∞–Ω—ã–µ —Å –Ω—É–ª—è, –≤—Å–µ –∏–¥–µ–∏ –¥–ª—è –±–æ—Ç–æ–≤ –ø—Ä–∏–¥—É–º—ã–≤–∞–µ–º —Å–∞–º–∏.

_üìä –ú—ã —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–Ω—è—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É –Ω–∞—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–∏—è—Ç–Ω–∞—è —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∞. ü¶æ –ù–µ –æ—Å—Ç–∞–≤–∏–º –≤–∞—Å –±–µ–∑ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö —Å–∏—Å—Ç–µ–º—ã, –≤—Å—ë —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∞—Å)_`
        keyboard = [['üßë‚Äçüè´ –ó–∞–∫–∞–∑–∞—Ç—å –±–æ—Ç–∞', 'üîë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å'], ['üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', 'ü¶æ –ü–∞—Ä—Ç–Ω—ë—Ä—ã'], ['üóΩ –î—Ä—É–≥–æ–µ']]
    } else if (language === 'ua') {
        message = `üëä –í—ñ—Ç–∞—î–º–æ –í–∞—Å *${msg.from.first_name}* —É —Å–µ—Ä–≤—ñ—Å—ñ - @BuckCreatorBot

 *ü¶æ –ù–∞—à –ø—Ä–æ–µ–∫—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—î –≤–∞–º –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å:*

 üôå–°—Ç–≤–æ—Ä–∏—Ç–∏ —Å–≤–æ–≥–æ –∫–æ–º–µ—Ä—Ü—ñ–π–Ω–æ–≥–æ –±–æ—Ç–∞ –≤ –∫—ñ–ª—å–∫–∞ –∫–ª—ñ–∫—ñ–≤.
 üíª–ù–∞—à—ñ –±–æ—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω—ñ –∑ –Ω—É–ª—è, –≤—Å—ñ —ñ–¥–µ—ó –¥–ª—è –±–æ—Ç—ñ–≤ –≤–∏–≥–∞–¥—É—î–º–æ —Å–∞–º—ñ.

 _üìä –ú–∏ —Ä–æ–∑—Ä–æ–±–ª—è—î–º–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∑—Ä–æ–∑—É–º—ñ–ª–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É –Ω–∞—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–∏—î–º–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞.  ü¶æ –ù–µ –∑–∞–ª–∏—à–∏–º–æ –≤–∞—Å –±–µ–∑ —Ä–µ–≥—É–ª—è—Ä–Ω–∏—Ö –æ–Ω–æ–≤–ª–µ–Ω—å —Å–∏—Å—Ç–µ–º–∏, –≤—Å–µ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –≤–∞—Å)_`
        keyboard = [['üßë‚Äçüè´ –ó–∞–º–æ–≤–∏—Ç–∏ –±–æ—Ç', 'üîë –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å'], ['üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å', 'ü¶æ –ü–∞—Ä—Ç–Ω–µ—Ä–∏'], ['üóΩ –Ü–Ω—à–µ']]
    }
    bot.sendMessage(chatId, message, {
        reply_markup: {
            keyboard: keyboard,
            resize_keyboard : true
        },
        parse_mode: 'Markdown'
    })
})

bot.onText(/üßë‚Äçüè´ –ó–∞–∫–∞–∑–∞—Ç—å –±–æ—Ç–∞|üßë‚Äçüè´ –ó–∞–º–æ–≤–∏—Ç–∏ –±–æ—Ç/, async (msg) => {
    const chatId = msg.chat.id;
    let language = await languageUser(chatId);
    let inlineKeyboard = [];
    let message;
    const bots = await db.collection('bots').find({}).toArray();
    let row = [];
    if (language === 'ru') {
        message = 'üîç –í—ã–±–µ—Ä–∏—Ç–µ –±–æ—Ç –∏–∑ –Ω–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞ :\n' +
            '‚ùóÔ∏è –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –±–æ—Ç–∞, –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å–∞–º–∏ —á–µ—Ä–µ–∑ "–∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –±–æ—Ç–∞, –æ–ø–ª–∞—á–∏–≤–∞—Ç—å —Ö–æ—Å—Ç–∏–Ω–≥, –∑–∞–∫–∞–∑–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –Ω—É–∂–Ω—ã, —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–º,  –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ.';
        for (let i = 0; i < bots.length; i += 1) {
            const bot = bots[i];
            row.push({
                text: bot.botName, // –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–µ
                callback_data: `bot_${bot._id}` // Callback –¥–∞–Ω–Ω—ã–µ, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞
            });
            if (row.length === 2) {
                inlineKeyboard.push(row);
                row = [];
            }
        }
        if (row.length > 0) {
            inlineKeyboard.push(row);
        }

    } else if (language === 'ua') {
        message = ' üîç –í–∏–±–µ—Ä—ñ—Ç—å –±–æ—Ç –∑ –Ω–∞—à–æ–≥–æ —Å–ø–∏—Å–∫—É:\n' +
            ' ‚ùóÔ∏è –ü—ñ—Å–ª—è –≤–∏–±–æ—Ä—É –±–æ—Ç–∞, –≤–∏ –∑–º–æ–∂–µ—Ç–µ —Å–∞–º—ñ —á–µ—Ä–µ–∑ "–∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å", –ø—Ä–æ–≤–æ–¥–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞, –æ–ø–ª–∞—á—É–≤–∞—Ç–∏ —Ö–æ—Å—Ç–∏–Ω–≥, –∑–∞–º–æ–≤–∏—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —è–∫—ñ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω—ñ, –∫–µ—Ä—É–≤–∞—Ç–∏ –Ω–∏–º, —Ç–∞ –±–∞–≥–∞—Ç–æ —ñ–Ω—à–æ–≥–æ.';

        for (let i = 0; i < bots.length; i += 1) {
            const bot = bots[i];
            row.push({
                text: bot.botName, // –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–µ
                callback_data: `bot_${bot._id}` // Callback –¥–∞–Ω–Ω—ã–µ, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞
            });
            if (row.length === 2) {
                inlineKeyboard.push(row);
                row = [];
            }
        }
        if (row.length > 0) {
            inlineKeyboard.push(row);
        }
    }
    bot.sendMessage(chatId, message, {
        reply_markup: {
            inline_keyboard: inlineKeyboard,
        }
    });
});
bot.onText(/üîë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å|üîë –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å/, async (msg) => {
    const chatId = msg.chat.id;
    let language = await languageUser(chatId);
    let inlineKeyboard = [];
    let message
    if (await haveBots(chatId)) {
        const user = await db.collection('users').findOne({ chatId: chatId });
        const bots = await db.collection('botsUser').find({ _id: { $in: user.bots.map(id => new ObjectId(id)) } }).toArray();
        const userBots = await db.collection('botsUser').find({ buyerId: chatId }).toArray();

        if (language === 'ru') {
            message = "–í—ã –ø–æ–ø–∞–ª–∏ –≤ —Ä–∞–∑–¥–µ–ª *üîë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å*!\n–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –±–æ—Ç–∞–º–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:";
        } else if (language === "ua") {
            message = "–í–∏ –ø–æ—Ç—Ä–∞–ø–∏–ª–∏ –¥–æ —Ä–æ–∑–¥—ñ–ª—É *üîë –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å*!\n–£ —Ü—å–æ–º—É —Ä–æ–∑–¥—ñ–ª—ñ –≤–∏ –º–æ–∂–µ—Ç–µ –∫–µ—Ä—É–≤–∞—Ç–∏ —Å–≤–æ—ó–º–∏ –±–æ—Ç–∞–º–∏\n\n–í–∏–±–µ—Ä—ñ—Ç—å –±–æ—Ç–∞, —è–∫–æ–º—É –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:";
        }

        let row = [];
        let inlineKeyboard = [];
        let addedBots = new Set();

        bots.forEach(bot => {
            userBots.filter(ub => ub.botName === bot.botName).forEach(userBot => {
                if (!addedBots.has(userBot.BID)) {
                    row.push({ text: bot.botName + ' | ' + userBot.BID, callback_data: `manage_bot_${userBot.BID}` });
                    addedBots.add(userBot.BID);
                    if (row.length === 2) {
                        inlineKeyboard.push(row);
                        row = [];
                    }
                }
            });
        });

        if (row.length > 0) inlineKeyboard.push(row);

        if (inlineKeyboard.length > 0) {
            bot.sendMessage(chatId, message, {
                reply_markup: {
                    inline_keyboard: inlineKeyboard
                },
                parse_mode: 'Markdown'
            });
        }

    } else {
        if (language === 'ru') {
            message = 'üëÄ –£ –≤–∞—Å –∫—É–ø–ª–µ–Ω–æ 0 –±–æ—Ç–æ–≤.\n' +
                'üîë –ü–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –æ–¥–Ω–æ–≥–æ –∏–ª–∏ –±–æ–ª–µ–µ –±–æ—Ç–æ–≤, –≤–∞–º –æ—Ç–∫—Ä–æ–µ—Ç—Å—è "–∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å" –∞ —Ç–∞–∫ –∂–µ –∑–∞–∫—Ä–∏—Ç—ã–π —á–∞—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤, —á—Ç–æ–± —Ä–µ—à–∞—Ç—å –≤–∞—à–∏ –ø—Ä–æ–±–ª–µ–º—ã –Ω–∞–ø—Ä—è–º—É—é –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –±–æ—Ç–æ–≤ –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –≤–∞–º –ø–æ–º–æ–≥—É—Ç –Ω–∞—à–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –≤ —á–∞—Ç–µ 24/7.'
        } else if (language === 'ua') {
            message = 'üëÄ –£ –≤–∞—Å –∫—É–ø–ª–µ–Ω–æ 0 –±–æ—Ç—ñ–≤.\n' +
                'üîë –ü—ñ—Å–ª—è –ø–æ–∫—É–ø–∫–∏ –æ–¥–Ω–æ–≥–æ –∞–±–æ –±—ñ–ª—å—à–µ –±–æ—Ç—ñ–≤, –≤–∞–º –≤—ñ–¥–∫—Ä–∏—î—Ç—å—Å—è "–∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å" —ñ –∑–∞–∫—Ä–∏—Ç–∏–π —á–∞—Ç –∫–ª—ñ—î–Ω—Ç—ñ–≤, —â–æ–± –≤–∏—Ä—ñ—à—É–≤–∞—Ç–∏ –≤–∞—à—ñ –ø—Ä–æ–±–ª–µ–º–∏ –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ –ø—Ä–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—ñ –±–æ—Ç—ñ–≤ –∞–±–æ —ñ–Ω—à–∏—Ö –ø–∏—Ç–∞–Ω—å –≤–∞–º –¥–æ–ø–æ–º–æ–∂—É—Ç—å –Ω–∞—à—ñ –º–µ–Ω–µ–¥–∂–µ—Ä–∏ –≤ —á–∞—Ç—ñ 24/7.'
        }
        bot.sendMessage(chatId, message);
    }
})
bot.onText(/üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å|üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å/, async (msg)=> {
    const chatId = msg.chat.id;
    let language = await languageUser(chatId);
    let inlineKeyboard = [];
    let message
    const user = await db.collection('users').findOne({chatId: chatId})
    if (language === 'ru') {
        message = '*üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å:*\n' +
            '\n' +
            `üÜî –í–∞—à ID: \`${chatId}\`
` +
            `ü§ñ –ö—É–ø–ª–µ–Ω–æ –±–æ—Ç–æ–≤: *${user.bots.length}*
` +
            '\n' +
            `üåû –í–∞—à –±–∞–ª–∞–Ω—Å: *${user.balance}$*
`
        inlineKeyboard = [
            [{text: '–ü–æ–ø–æ–ª–Ω–∏—Ç—å', callback_data: 'upToAccountBalance'}, {text: '–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data: 'convertRefBalance'}],
            [{text: '–ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫', callback_data: 'changeLanguage'}]
        ]
    } else if (language === 'ua') {
        message = ' *üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å :*\n' +
            '\n' +
            `üÜî –í–∞—à ID: \`${chatId}\`
`+
            `ü§ñ –ö—É–ø–ª–µ–Ω–æ –±–æ—Ç—ñ–≤: *${user.bots.length}*
`+
            '\n' +
            `üåû –í–∞—à –±–∞–ª–∞–Ω—Å: *${user.balance}$*
`
        inlineKeyboard = [
            [{text: '–ü–æ–ø–æ–≤–Ω–∏—Ç–∏', callback_data: 'upToAccountBalance'}, {text: '–ö–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏', callback_data: 'convertRefBalance'}],
            [{text: '–ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É', callback_data: 'changeLanguage'}]
        ]
    }
    bot.sendMessage(chatId, message, {reply_markup: {inline_keyboard: inlineKeyboard}, parse_mode: 'Markdown'});
})
bot.onText(/ü¶æ –ü–∞—Ä—Ç–Ω—ë—Ä—ã|ü¶æ –ü–∞—Ä—Ç–Ω–µ—Ä–∏/, async (msg)=> {
    const chatId = msg.chat.id;
    let language = await languageUser(chatId);
    let message
    let inlineKeyboard
    const user = await db.collection('users').findOne({chatId: chatId})
    const userInvited = user.usersInvited.length
    let lvl
    if (userInvited < 5) {
        lvl = 1
    } else if (userInvited > 5 || userInvited < 10) {
        lvl = 2
    } else if (userInvited > 10) {
        lvl = 3
    }
    if (language === 'ru') {
        message = `üë• –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:
–î–∞—ë—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ö–æ—Ä–æ—à–æ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å, —Å –∫–∞–∂–¥–æ–≥–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –∫–æ—Ç–æ—Ä—ã–π –∫—É–ø–∏–ª —Å–µ–±–µ –±–æ—Ç –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –æ—Ç 4% –æ—Ç –∑–∞–∫–∞–∑–∞. –¢–∞–∫ –∂–µ –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å—Ç–∞—Ç—å –ú–µ–¥–∏–∞ –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –º—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –µ—â—ë –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ 4%. \n\n
üë§ –í–∞—à–∏ –ø–∞—Ä—Ç–Ω—ë—Ä—ã:

1 —É—Ä–æ–≤–µ–Ω—å - ${user.usersInvited.length} –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ - ${user.statusRefBalance}$ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ

üîó –í–∞—à–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è —Å—Å—ã–ª–∫–∞: https://t.me/BuckCreatorBot?start=${chatId}`
        inlineKeyboard = [[{text: '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥', callback_data: 'activatePromocode'}]]
    } else if (language === 'ua') {
        message = `üë• –ü–∞—Ä—Ç–Ω–µ—Ä—Å—å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–∞:
–î–∞—î –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –¥–æ–±—Ä–µ –∑–∞—Ä–æ–±–∏—Ç–∏, –∑ –∫–æ–∂–Ω–æ–≥–æ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞, —è–∫–∏–π –∫—É–ø–∏–≤ —Å–æ–±—ñ –±–æ—Ç –≤–∏ –æ—Ç—Ä–∏–º—É—î—Ç–µ –≤—ñ–¥ 4% –≤—ñ–¥ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.\n\n
üë§ –í–∞—à—ñ –ø–∞—Ä—Ç–Ω–µ—Ä–∏:

1 —Ä—ñ–≤–µ–Ω—å - ${user.usersInvited.length} –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤ - ${user.statusRefBalance}$ –∑–∞—Ä–æ–±–ª–µ–Ω–æ

üîó –í–∞—à–µ —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–µ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—å–∫–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è: https://t.me/BuckCreatorBot?start=${chatId}`
        inlineKeyboard = [[{text: '–ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥', callback_data: 'activatePromocode'}]]
    }
    bot.sendMessage(chatId, message, {reply_markup: {inline_keyboard: inlineKeyboard}});
})
    bot.onText(/üóΩ –Ü–Ω—à–µ|üóΩ –î—Ä—É–≥–æ–µ/, async (msg)=> {
    const chatId = msg.chat.id;
    let language = await languageUser(chatId);
    let message
    let inlineKeyboard
            await db.collection('users').findOne({chatId: chatId});
            if (language === 'ru') {
                message = 'üóΩ –î—Ä—É–≥–æ–µ :'
                inlineKeyboard = [
                    [{text: '‚úàÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞', callback_data: 'statusProject'}],
                    [{text: 'üìö –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –ù–æ–≤–æ—Å—Ç–∏', url: 'https://t.me/NewsBuckCreator'}, {text: 'üîç –û—Ç–∑—ã–≤—ã –∫–ª–∏–µ–Ω—Ç–æ–≤', url: 'https://t.me/+h6Vbn9oXN5tiZDRi'}],
                    [{text: 'üîë –ó–∞–∫—Ä–∏—Ç—ã–π —á–∞—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤', callback_data: 'clientChat'}, {text: 'ü§ñ Discussion Chat', url: 'https://t.me/+jdrAX6izAAU2YjVi'}],
                    [{text: 'üõë –ì–ª–∞–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ–µ–∫—Ç–∞', url: 'https://telegra.ph/Glavnye-Pravila-Proekta-05-24'}, {text: 'üë• –û–±—â—ã–π —á–∞—Ç –ø—Ä–æ–µ–∫—Ç–∞', url: 'https://t.me/ForumBuckCreator'}],
                    [{text: 'üÜò –ü–æ–º–æ—â—å', callback_data: 'createTiketHelpManager'}, {text: 'üòà –ï—Å–ª–∏ —Å–ø–∞–º', url: 'https://t.me/HelpersBuckCreatorBot'}],
                ]
            } else if (language === 'ua') {
                message = 'üóΩ –Ü–Ω—à–µ :'
                inlineKeyboard = [
                    [{text: '‚úàÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç—É', callback_data: 'statusProject'}],
                    [{text: 'üìö –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞ –ù–æ–≤–∏–Ω–∏', url: 'https://t.me/NewsBuckCreator'}, {text: 'üîç –í—ñ–¥–≥—É–∫–∏ –∫–ª—ñ—î–Ω—Ç—ñ–≤', url: 'https://t.me/+h6Vbn9oXN5tiZDRi'}],
                    [{text: 'üîë –ó–∞–∫—Ä–∏—Ç–∏–π —á–∞—Ç –∫–ª—ñ—î–Ω—Ç—ñ–≤', callback_data: 'clientChat'}, {text: 'ü§ñ Discussion Chat', url: 'https://t.me/+jdrAX6izAAU2YjVi'}],
                    [{text: 'üõë –ì–æ–ª–æ–≤–Ω—ñ –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ–µ–∫—Ç—É', url: 'https://telegra.ph/Golovn%D1%96-Pravila-Proektu-05-24'}, {text: 'üë• –ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Ç –ø—Ä–æ–µ–∫—Ç—É', url: 'https://t.me/ForumBuckCreator'}],
                    [{text: 'üÜò –î–æ–ø–æ–º–æ–≥–∞', callback_data: 'createTiketHelpManager'}, {text: 'üòà –Ø–∫—â–æ —Å–ø–∞–º', url: 'https://t.me/HelpersBuckCreatorBot'}],
                ]
            }
            bot.sendMessage(chatId, message, {reply_markup: {inline_keyboard: inlineKeyboard}});

        }
    )
    if (data === 'upToAccountBalance') {
        let message
        if (language === 'ru') {
            message = 'üí≥ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ UAH'
        } else if (language === "ua") {
            message = 'üí≥ –í–≤–µ–¥—ñ—Ç—å —Å—É–º–º—É –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –≤ UAH'
        }
        bot.sendMessage(chatId, message)
        state[chatId] = {awaitingAmountupToAccountBalance: true}
    }
    if (data === 'convertRefBalance') {
        const user = await db.collection('users').findOne({chatId: chatId})
        const refBalance = user.refBalance
        let message
        if (refBalance === 0) {
            if (language === "ru") {
                message = '*üö´ –ù–∞ –≤–∞—à–µ–º —Ä–µ—Ñ-–±–∞–ª–∞–Ω—Å–µ - 0*'
            } else if (language === "ua") {
                message = '*üö´ –ù–∞ –≤–∞—à–æ–º—É —Ä–µ—Ñ-–±–∞–ª–∞–Ω—Å—ñ - 0*'
            }
            bot.sendMessage(chatId, message, {parse_mode: 'Markdown'})
            return
        }
        await db.collection('users').findOneAndUpdate({chatId: chatId}, {$inc: {refBalance: -refBalance, balance: +refBalance}})
        if (language === 'ru') {
            message = `*‚úÖ –£—Å–ø–µ—à–Ω–æ!*\n\n_–ó–∞–π–¥–∏—Ç–µ –≤ –∫–æ—à–µ–ª—ë–∫ —á—Ç–æ –±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å!_`
        } else if (language === "ua") {
            message = `*‚úÖ –£—Å–ø—ñ—à–Ω–æ!*\n\n_–ó–∞–π–¥—ñ—Ç—å –≤ –≥–∞–º–∞–Ω–µ—Ü—å —â–æ–± –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –±–∞–ª–∞–Ω—Å!_`
        }
        bot.sendMessage(chatId, message, {parse_mode: 'Markdown'})
    }
    if (data === 'byUkrBanks') {
        const amount = state[chatId].amountUpToPay
        state[chatId].currencyByPay = 'Bank Ukraine'
        let message
        let inlineKeyboard
        if (language === "ru") {
            message = `üí≥ –û–ø–ª–∞—Ç–∏—Ç–µ - *${amount} UAH*, –Ω–∞ –∫–∞—Ä—Ç—É \`4441111130506680\`\n\n_–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç–∏–ª –∏ –≤ —Ç–µ—á–µ–Ω–∏–∏ 24 —á–∞—Å–æ–≤ –≤–∞—à—É –∑–∞—è–≤–∫—É –æ–±—Ä–∞–±–æ—Ç–∞—é—Ç_`
            inlineKeyboard = [[{text: '–Ø –æ–ø–ª–∞—Ç–∏–ª', callback_data: 'IHavePaid'}]]
        } else if (language === 'ua') {
            message = `üí≥ –û–ø–ª–∞—Ç—ñ—Ç—å - *${amount} UAH*, –Ω–∞ –∫–∞—Ä—Ç—É \`4441111130506680\`\n\n_–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–ø–ª–∞—Ç–∏–≤ —Ç–∞ –ø—Ä–æ—Ç—è–≥–æ–º 24 –≥–æ–¥–∏–Ω –≤–∞—à—É –∑–∞—è–≤–∫—É –æ–ø—Ä–∞—Ü—é—é—Ç—å_`
            inlineKeyboard = [[{text: '–Ø –æ–ø–ª–∞—Ç–∏–≤', callback_data: 'IHavePaid'}]]
        }
        bot.sendMessage(chatId, message, {reply_markup: {
            inline_keyboard: inlineKeyboard
        }, parse_mode: 'Markdown'})
    }
    if (data === 'byUsdtErc20') {
        const amount = state[chatId].amountUpToPay
        state[chatId].currencyByPay = 'USDT ERC-20'
        let message
        let inlineKeyboard
        if (language === "ru") {
            message = `üí≥ –û–ø–ª–∞—Ç–∏—Ç–µ - *${amount} UAH*, –Ω–∞ USDT ERC-20 \`0x26bcf456cef7f4bbe4d2bb0a4f792327e8e677fd\`\n\n_–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç–∏–ª –∏ –≤ —Ç–µ—á–µ–Ω–∏–∏ 24 —á–∞—Å–æ–≤ –≤–∞—à—É –∑–∞—è–≤–∫—É –æ–±—Ä–∞–±–æ—Ç–∞—é—Ç_`
            inlineKeyboard = [[{text: '–Ø –æ–ø–ª–∞—Ç–∏–ª', callback_data: 'IHavePaid'}]]
        } else if (language === 'ua') {
            message = `üí≥ –û–ø–ª–∞—Ç—ñ—Ç—å - *${amount} UAH*, –Ω–∞ USDT ERC-20 \`0x26bcf456cef7f4bbe4d2bb0a4f792327e8e677fd\`\n\n_–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–ø–ª–∞—Ç–∏–≤ —Ç–∞ –ø—Ä–æ—Ç—è–≥–æ–º 24 –≥–æ–¥–∏–Ω –≤–∞—à—É –∑–∞—è–≤–∫—É –æ–ø—Ä–∞—Ü—é—é—Ç—å_`
            inlineKeyboard = [[{text: '–Ø –æ–ø–ª–∞—Ç–∏–≤', callback_data: 'IHavePaid'}]]
        }
        bot.sendMessage(chatId, message, {reply_markup: {
                inline_keyboard: inlineKeyboard
            }, parse_mode: 'Markdown'})
    }
    if (data === 'byUsdtTrc20') {
        const amount = state[chatId].amountUpToPay
        state[chatId].currencyByPay = 'USDT TRC-20'
        let message
        let inlineKeyboard
        if (language === "ru") {
            message = `üí≥ –û–ø–ª–∞—Ç–∏—Ç–µ - *${amount} UAH*, –Ω–∞ USDT TRC-20 \`TC1m31tMa6CHomw2NaFk31XAotMniZjPw2\`\n\n_–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç–∏–ª –∏ –≤ —Ç–µ—á–µ–Ω–∏–∏ 24 —á–∞—Å–æ–≤ –≤–∞—à—É –∑–∞—è–≤–∫—É –æ–±—Ä–∞–±–æ—Ç–∞—é—Ç_`
            inlineKeyboard = [[{text: '–Ø –æ–ø–ª–∞—Ç–∏–ª', callback_data: 'IHavePaid'}]]
        } else if (language === 'ua') {
            message = `üí≥ –û–ø–ª–∞—Ç—ñ—Ç—å - *${amount} UAH*, –Ω–∞ USDT TRC-20 \`TC1m31tMa6CHomw2NaFk31XAotMniZjPw2\`\n\n_–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–ø–ª–∞—Ç–∏–≤ —Ç–∞ –ø—Ä–æ—Ç—è–≥–æ–º 24 –≥–æ–¥–∏–Ω –≤–∞—à—É –∑–∞—è–≤–∫—É –æ–ø—Ä–∞—Ü—é—é—Ç—å_`
            inlineKeyboard = [[{text: '–Ø –æ–ø–ª–∞—Ç–∏–≤', callback_data: 'IHavePaid'}]]
        }
        bot.sendMessage(chatId, message, {reply_markup: {
                inline_keyboard: inlineKeyboard
            }, parse_mode: 'Markdown'})
    }
    if (data === 'IHavePaid') {
        const amount = state[chatId].amountUpToPay
        const currencyByPay = state[chatId].currencyByPay
        let message
        if (language === 'ru') {
            message = '*‚è± –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –æ–±—Ä–æ–±–æ—Ç–∫—É.*'
        } else if (language === 'ua') {
            message = '*‚è± –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –æ–±—Ä–æ–±–∫—É.*'
        }
        bot.sendMessage(chatId, message, {parse_mode: 'Markdown'})
        const botOptions = await db.collection('botOptions').findOne({});
        const admins = botOptions.admins;
        for (let i = 0; i < admins.length; i += 1) {
            const adminId = admins[i];
            bot.sendMessage(adminId, `_–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞:_ \n\nChat Id - *${chatId}*\nAmount - *${amount} UAH*\nPayment method - *${currencyByPay}*`, {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [{text: `–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É`, callback_data: `ConfirmPayment_${chatId}`}, {text: `–û—Ç–∫–ª–æ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É`, callback_data: `DeclinePayment_${chatId}`}]
                    ]
                }
            });
        }
    }
    if (data.startsWith('ConfirmPayment_')) {
        const userId = data.split('_')[1]
        const amount = state[userId].amountUpToPay
        await db.collection('users').findOneAndUpdate({chatId: parseFloat(userId)}, {$inc: {balance: amount}})
        bot.editMessageText('–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞.', {chat_id: chatId, message_id: messageId})
        let language = await languageUser(parseFloat(userId))
        let message
        if (language === 'ru') {
            message = '*‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á—ë—Ç–∞ –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!*\n\n_–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–æ—à–µ–ª—ë–∫ —á—Ç–æ –±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à –±–∞–ª–∞–Ω—Å_'
        } else if (language === 'ua') {
            message = '*‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É –±—É–ª–∞ —Å—Ö–≤–∞–ª–µ–Ω–∞!*\n\n_–ü–µ—Ä—ñ–π–¥—ñ—Ç—å –≤ –≥–∞–º–∞–Ω–µ—Ü—å —â–æ–± –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –≤–∞—à –±–∞–ª–∞–Ω—Å_'
        }
        bot.sendMessage(userId, message, {parse_mode: 'Markdown'})
    }
    if (data.startsWith('DeclinePayment_')){
        const userId = data.split('_')[1]
        bot.editMessageText('–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.', {chat_id: chatId, message_id: messageId})
        let language = await languageUser(parseFloat(userId))
        let message
        if (language === 'ru') {
            message = '*‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á—ë—Ç–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!*\n\n_–ù–∞–ø–∏—à–∏—Ç–µ –≤ "–ü–æ–º–æ—â—å", —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É._'
        } else if (language === 'ua') {
            message = '*‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É –±—É–ª–∞ –≤—ñ–¥—Ö–∏–ª–∏–Ω–∞!*\n\n_–ù–∞–ø–∏—à—ñ—Ç—å –≤ "–î–æ–ø–æ–º–æ–≥–∞" —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –ø—Ä–∏—á–∏–Ω—É._'
        }
        bot.sendMessage(userId, message, {parse_mode: 'Markdown'})
    }
    if (data.startsWith('bot_')){
        let message
        let inlineKeyboard
        const botInfo = await db.collection('bots').findOne({ _id: new ObjectId(data.split('_')[1]) })
        if (!botInfo) {
            return
        }
        if (language === "ru"){
            message = `üöÄ‚òùÔ∏è–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –≤—ã –≤—ã–±—Ä–∞–ª–∏ –±–æ—Ç –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏. –í —Å–ª—É—á–∞–∏ –µ—Å–ª–∏ –≤—ã –∫—É–ø–∏—Ç–µ –Ω–µ —Ç–æ–≥–æ –±–æ—Ç–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–µ–ª–∏, –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –±—É–¥–µ—Ç –Ω–µ –≤–æ–∑–º–æ–∂–µ–Ω! –¢–∞–∫ –∂–µ —Å–æ–≤–µ—Ç—É–µ–º –≤–∞–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ–µ–∫—Ç–∞.

‚ùî–í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –±–æ—Ç–∞: ${botInfo.botName} 

üí≥ –¶–µ–Ω–∞: ${botInfo.priceUAH} UAH | ${botInfo.priceUSD} USD

 ü§ñ ${botInfo.botName} - —ç—Ç–æ –±–æ—Ç –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç:
${botInfo.description}

‚ô¶Ô∏è –ü—Ä–∏–º–µ—Ä –±–æ—Ç–∞: ${botInfo.linkTestBot}`
            inlineKeyboard = [
                [{text: `–ó–∞–∫–∞–∑–∞—Ç—å –∑–∞ ${botInfo.priceUAH} UAH | ${botInfo.priceUSD} USD`, callback_data: `BotBuy_${botInfo._id}`}],
                [{text: '–ù–∞–∑–∞–¥', callback_data: 'goBackToListBot'}]
            ]
        } else if (language === 'ua') {
            message = `‚òùÔ∏è –ë—É–¥—å –ª–∞—Å–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ —â–µ —Ä–∞–∑ –∫—ñ–ª—å–∫–∞ —Ä–∞–∑—ñ–≤ –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ—é, —á–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–∏ –≤–∏–±—Ä–∞–ª–∏ –±–æ—Ç —è–∫–∏–π —Ö–æ—á–µ—Ç–µ –ø—Ä–∏–¥–±–∞—Ç–∏.  –Ø–∫—â–æ –≤–∏ –∫—É–ø–∏—Ç–µ –Ω–µ —Ç–æ–≥–æ –±–æ—Ç–∞ —è–∫–æ–≥–æ —Ö–æ—Ç—ñ–ª–∏, –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ –±—É–¥–µ –Ω–µ –º–æ–∂–ª–∏–≤–∏–º!  –¢–∞–∫–æ–∂ —Ä–∞–¥–∏–º–æ –≤–∞–º –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ–µ–∫—Ç—É.

 ‚ùî–í–∏ —Ö–æ—á–µ—Ç–µ –ø—Ä–∏–¥–±–∞—Ç–∏ –±–æ—Ç–∞: ${botInfo.botName}

 üí≥ –¶—ñ–Ω–∞: ${botInfo.priceUAH} UAH |  ${botInfo.priceUSD} USD

  ü§ñ ${botInfo.botName} - —Ü–µ –±–æ—Ç, —è–∫–∏–π –¥–æ–∑–≤–æ–ª—è—î:
 ${botInfo.description}

 ‚ô¶Ô∏è –ü—Ä–∏–∫–ª–∞–¥ –±–æ—Ç–∞: ${botInfo.linkTestBot}`
            inlineKeyboard = [
                [{text: '–ü—Ä–∏–¥–±–∞—Ç–∏ –±–æ—Ç–∞', callback_data: `BotBuy_${botInfo._id}`}],
                [{text: '–ù–∞–∑–∞–¥', callback_data: 'goBackToListBot'}]
            ]
        }
        bot.editMessageText(message, {chat_id: chatId, message_id: messageId, reply_markup: {inline_keyboard: inlineKeyboard}})
    }
    if (data === 'goBackToListBot') {
        let inlineKeyboard = [];
        let message;
        const bots = await db.collection('bots').find({}).toArray();
        let row = [];
        if (language === 'ru') {
            message = 'üîç –í—ã–±–µ—Ä–∏—Ç–µ –±–æ—Ç –∏–∑ –Ω–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞ :\n' +
                '‚ùóÔ∏è –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –±–æ—Ç–∞, –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å–∞–º–∏ —á–µ—Ä–µ–∑ "–∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –±–æ—Ç–∞, –æ–ø–ª–∞—á–∏–≤–∞—Ç—å —Ö–æ—Å—Ç–∏–Ω–≥, –∑–∞–∫–∞–∑–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –Ω—É–∂–Ω—ã, —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–º,  –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ.';
            for (let i = 0; i < bots.length; i += 1) {
                const bot = bots[i];
                row.push({
                    text: bot.botName, // –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–µ
                    callback_data: `bot_${bot._id}` // Callback –¥–∞–Ω–Ω—ã–µ, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞
                });
                if (row.length === 2) {
                    inlineKeyboard.push(row);
                    row = [];
                }
            }
            if (row.length > 0) {
                inlineKeyboard.push(row);
            }

        } else if (language === 'ua') {
            message = ' üîç –í–∏–±–µ—Ä—ñ—Ç—å –±–æ—Ç –∑ –Ω–∞—à–æ–≥–æ —Å–ø–∏—Å–∫—É:\n' +
                ' ‚ùóÔ∏è –ü—ñ—Å–ª—è –≤–∏–±–æ—Ä—É –±–æ—Ç–∞, –≤–∏ –∑–º–æ–∂–µ—Ç–µ —Å–∞–º—ñ —á–µ—Ä–µ–∑ "–∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å", –ø—Ä–æ–≤–æ–¥–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞, –æ–ø–ª–∞—á—É–≤–∞—Ç–∏ —Ö–æ—Å—Ç–∏–Ω–≥, –∑–∞–º–æ–≤–∏—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —è–∫—ñ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω—ñ, –∫–µ—Ä—É–≤–∞—Ç–∏ –Ω–∏–º, —Ç–∞ –±–∞–≥–∞—Ç–æ —ñ–Ω—à–æ–≥–æ.';

            for (let i = 0; i < bots.length; i += 1) {
                const bot = bots[i];
                row.push({
                    text: bot.botName, // –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–µ
                    callback_data: `bot_${bot._id}` // Callback –¥–∞–Ω–Ω—ã–µ, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞
                });
                if (row.length === 2) {
                    inlineKeyboard.push(row);
                    row = [];
                }
            }
            if (row.length > 0) {
                inlineKeyboard.push(row);
            }
        }
        bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: inlineKeyboard,
            }
        });
    }
    if (data.startsWith('BotBuy_')) {
        const id = data.split('_')[1];
        const botInfo = await db.collection('bots').findOne({_id: new ObjectId(id)});
        const user = await db.collection('users').findOne({chatId: chatId});
        const language = await languageUser(chatId)
        if (user.balance < botInfo.priceUAH) {
            try {
                if (language === 'ru') {
                    await bot.answerCallbackQuery(callbackQuery.id, {
                        text: 'üö´ –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å.\n–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
                        show_alert: true
                    });
                } else if (language === 'ua') {
                    await bot.answerCallbackQuery(callbackQuery.id, {
                        text: 'üö´ –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—ñ–π –±–∞–ª–∞–Ω—Å.\n–ü–æ–ø–æ–≤–Ω—ñ—Ç—å —ñ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.',
                        show_alert: true
                    });
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å:', error);
            }
            return
        } else {
            if (language === 'ru') {
                bot.editMessageText(`–í—ã —É–≤–µ—Ä–µ–Ω—ã –≤ –ø–æ–∫—É–ø–∫–µ –±–æ—Ç–∞ - *${botInfo.botName}*?`, {chat_id: chatId, message_id: messageId ,reply_markup: {inline_keyboard: [[{text: '–î–∞', callback_data: `yesBuyBot_${botInfo._id}`}], [{text: 'üö´ –û—Ç–º–µ–Ω–∞', callback_data: `bot_${botInfo._id}`}]]}, parse_mode: 'Markdown'})
            } else if (language === 'ua') {
                bot.editMessageText(`–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ —É –ø–æ–∫—É–ø—Ü—ñ –±–æ—Ç–∞ - *${botInfo.botName}*?`, {chat_id: chatId, message_id: messageId ,reply_markup: {inline_keyboard: [[{text: '–¢–∞–∫', callback_data: `yesBuyBot_${botInfo._id}`}], [{text: 'üö´ –°–∫–∞—Å—É–≤–∞—Ç–∏', callback_data: `bot_${botInfo._id}`}]]}, parse_mode: 'Markdown'})
            }
        }
    }
    if (data === 'goBackToListBot') {

    }
    if (data.startsWith('yesBuyBot_')) {
        const id = data.split('yesBuyBot_')[1]
        const botInfo = await db.collection('bots').findOne({_id: new ObjectId(id)})
        await db.collection('users').findOne({chatId: chatId});
        const language = await languageUser(chatId)
        const priceBot = 0 - botInfo.priceUAH
        db.collection('users').updateOne({ chatId: chatId }, { $inc: { balance: Math.round(priceBot) } })
        db.collection('bots').updateOne({_id: new ObjectId(id)}, { $inc: { buys: 1 }})
        const BID = await generateBotIdOnly()
        const botName = botInfo.botName
        const buyerId = chatId
        const token = ''
        const adminId = chatId
        const price = botInfo.priceUAH
        const balanceBot = 0
        const registrationDate = new Date().toLocaleString('en-US', { timeZone: 'Europe/Kiev' })
        const hostingDate = new Date();
        hostingDate.setMonth(hostingDate.getMonth() + 1);
        const hosting = hostingDate.toLocaleDateString('en-GB', { timeZone: 'Europe/Kiev' });
        await db.collection('botsUser').insertOne({
            BID,
            botName,
            balanceBot,
            buyerId,
            token,
            adminId,
            hosting,
            price,
            registrationDate,
        });
        const newBot = await db.collection('botsUser').findOne({BID: BID})
        db.collection('users').updateOne({ chatId: chatId }, { $push: { bots: newBot._id.toString() } })
        let message
        if (language === "ru") {
            message = '–°–ø–∞—Å–∏–±–æ —á—Ç–æ –ø—Ä–µ–æ–±—Ä–µ–ª–∏ —É –Ω–∞—Å –±–æ—Ç–∞! \n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–º –≤ —Ä–∞–∑–¥–µ–ª–µ *üîë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å*'
        } else if (language === 'ua') {
            message = '–î—è–∫—É—é —â–æ –ø—Ä–∏–¥–±–∞–ª–∏ —É –Ω–∞—Å –±–æ—Ç–∞!\n –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –∫–µ—Ä—É–≤–∞—Ç–∏ –Ω–∏–º —É —Ä–æ–∑–¥—ñ–ª—ñ *üîë –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å*'
        }
        const refferInfo = await db.collection('users').findOne({usersInvited: chatId})
        if (refferInfo) {
            await db.collection('users').findOneAndUpdate({usersInvited: chatId}, {$inc: {refBalance: (botInfo.priceUAH * 0.04)}})
            await db.collection('users').findOneAndUpdate({usersInvited: chatId}, {$inc: {statusRefBalance: (botInfo.priceUAH * 0.04)}})

        }
        bot.editMessageText(message, {chat_id: chatId, message_id: messageId, parse_mode: 'Markdown'})
    }
    if (data.startsWith('manage_bot_')) {
        delete state[chatId]
        const BID = data.split('manage_bot_')[1]
        const botInfo = await db.collection('botsUser').findOne({BID: BID})
        const language = await languageUser(chatId)
        let token = botInfo.token
        if (token) {
            token = botInfo.token
        } else {
            if (language === "ru") {
                token = '–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç—É–µ—Ç'
            } else if (language === 'ua') {
                token = '–¢–æ–∫–µ–Ω –≤—ñ–¥—Å—É—Ç–Ω—ñ–π'
            }
        }
        let message
        let inlineKeyboard = []
        if (language === 'ru') {
            message = `_–í—ã –≤—ã–±—Ä–∞–ª–∏ –±–æ—Ç–∞_ - *${botInfo.botName} | ${botInfo.BID}*\n\n_–ë–∞–ª–∞–Ω—Å –±–æ—Ç–∞_ - *${botInfo.balanceBot}*\n\n_–¢–æ–∫–µ–Ω_ - *${token}*\n_–ê–¥–º–∏–Ω –±–æ—Ç–∞_ - *${botInfo.adminId}*\n_–û–∫–æ–Ω—á–∞–Ω–∏–µ —Ö–æ—Å—Ç–∏–Ω–≥–∞_ - *${botInfo.hosting}*\n\n*–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ :*`
            inlineKeyboard = [
                [{text: 'Balance Bot', callback_data: `updateBalanceBot_${botInfo.BID}`}],
                [{text: 'Name Bot', callback_data: `changeNameBot_${botInfo.BID}`}, {text: 'Admin ID', callback_data: `changeAdminIdBot_${botInfo.BID}`},{text: 'Token Bot', callback_data: `changeTokenBot_${botInfo.BID}`}],
                [{text: '–ù–∞–∑–∞–¥', callback_data: 'backToListOfBuyBots'}]
            ]
        } else if (language === 'ua') {
            message = `_–í–∏ –æ–±—Ä–∞–ª–∏ –±–æ—Ç–∞_ - *${botInfo.botName} | ${botInfo.BID}*\n\n_–ë–∞–ª–∞–Ω—Å –±–æ—Ç–∞_ - *${botInfo.balanceBot}*\n\n_–¢–æ–∫–µ–Ω_ - *${token}*\n_–ê–¥–º—ñ–Ω –±–æ—Ç–∞_ - *${botInfo.adminId}*\n_–ó–∞–∫—ñ–Ω—á–µ–Ω–Ω—è —Ö–æ—Å—Ç–∏–Ω–≥—É_ - *${botInfo.hosting}*\n\n*–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é :*`
            inlineKeyboard = [
                [{text: 'Balance Bot', callback_data: `updateBalanceBot_${botInfo.BID}`}],
                [{text: 'Name Bot', callback_data: `changeNameBot_${botInfo.BID}`}, {text: 'Admin ID', callback_data: `changeAdminIdBot_${botInfo.BID}`},{text: 'Token Bot', callback_data: `changeTokenBot_${botInfo.BID}`}],
                [{text: '–ù–∞–∑–∞–¥', callback_data: 'backToListOfBuyBots'}]
            ]
        }
        bot.editMessageText(message, {chat_id: chatId, message_id: messageId, parse_mode: 'Markdown', reply_markup: {inline_keyboard: inlineKeyboard}})
    }
    if (data === 'backToListOfBuyBots') {
        const user = await db.collection('users').findOne({ chatId: chatId });
        const bots = await db.collection('botsUser').find({ _id: { $in: user.bots.map(id => new ObjectId(id)) } }).toArray();
        const userBots = await db.collection('botsUser').find({ buyerId: chatId }).toArray();
        let message
        let inlineKeyboard = []
        if (language === 'ru') {
            message = "–í—ã –ø–æ–ø–∞–ª–∏ –≤ —Ä–∞–∑–¥–µ–ª *üîë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å*!\n–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –±–æ—Ç–∞–º–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:";
        } else if (language === "ua") {
            message = "–í–∏ –ø–æ—Ç—Ä–∞–ø–∏–ª–∏ –¥–æ —Ä–æ–∑–¥—ñ–ª—É *üîë –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å*!\n–£ —Ü—å–æ–º—É —Ä–æ–∑–¥—ñ–ª—ñ –≤–∏ –º–æ–∂–µ—Ç–µ –∫–µ—Ä—É–≤–∞—Ç–∏ —Å–≤–æ—ó–º–∏ –±–æ—Ç–∞–º–∏\n\n–í–∏–±–µ—Ä—ñ—Ç—å –±–æ—Ç–∞, —è–∫–æ–º—É –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:";
        }

        let row = [];
        let addedBots = new Set();

        bots.forEach(bot => {
            userBots.filter(ub => ub.botName === bot.botName).forEach(userBot => {
                if (!addedBots.has(userBot.BID)) {
                    row.push({ text: bot.botName + ' | ' + userBot.BID, callback_data: `manage_bot_${userBot.BID}` });
                    addedBots.add(userBot.BID);
                    if (row.length === 2) {
                        inlineKeyboard.push(row);
                        row = [];
                    }
                }
            });
        });

        if (row.length > 0) inlineKeyboard.push(row);

        if (inlineKeyboard.length > 0) {
            bot.editMessageText(message, {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: {
                    inline_keyboard: inlineKeyboard
                },
                parse_mode: 'Markdown'
            });
        }
    }
    if (data === 'activatePromocode') {
        let message
        let inlineKeyboard

        if (language === 'ru') {
            message = '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å—ã :'
            inlineKeyboard = [[{text: '–û—Ç–º–µ–Ω–∞', callback_data: 'cancelActivatePromocode'}]]
        } else if (language === 'ua') {
            message = '–í–≤–µ–¥—ñ—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –±–æ–Ω—É—Å–∏ :'
            inlineKeyboard = [[{text: '–í—ñ–¥–º—ñ–Ω–∏—Ç–∏', callback_data: 'cancelActivatePromocode'}]]
        }
        state[chatId] = { awaitingActivaatePromocode: true }
        bot.editMessageText(message, {chat_id: chatId, message_id: messageId, reply_markup: {inline_keyboard: inlineKeyboard}})
    }
    if (data === 'cancelActivatePromocode') {
        state[chatId].awaitingActivaatePromocode = false
        let message
        if (language === 'ru') {
            message = '–û—Ç–º–µ–Ω–µ–Ω–æ.'
        } else if (language === 'ua') {
            message = '–í—ñ–¥–º—ñ–Ω–µ–Ω–æ.'
        }
        bot.sendMessage(chatId, message)
    }
    if (data === 'cancelNewsletter') {
        state[chatId].awaitingTextNewsletter = false
        bot.sendMessage(chatId, '–û—Ç–º–µ–Ω–µ–Ω–æ.')
    }
    if (data.startsWith('updateBalanceBot_')) {
        const BID = data.split('updateBalanceBot_')[1]
        const user = await db.collection('users').findOne({chatId: chatId})
        if (language === 'ru') {
            bot.editMessageText(`_–í–∞—à –±–∞–ª–∞–Ω—Å_ - *${user.balance}*\n*–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫–∞–∫—É—é –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ –±–∞–ª–∞–Ω—Å –±–æ—Ç–∞ :*`, {chat_id: chatId, message_id: messageId, parse_mode: 'Markdown', reply_markup: {inline_keyboard: [[{text: 'üîô –ù–∞–∑–∞–¥', callback_data: `manage_bot_${BID}`}]]}})
        } else if (language === 'ua') {
            bot.editMessageText( `_–í–∞—à –±–∞–ª–∞–Ω—Å_ - *${user.balance}*\n*–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É —è–∫—É –í–∏ —Ö–æ—á–µ—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ –±–∞–ª–∞–Ω—Å –±–æ—Ç–∞ :*`, {chat_id: chatId, message_id: messageId, parse_mode: 'Markdown', reply_markup: {inline_keyboard: [[{text: 'üîô –ù–∞–∑–∞–¥', callback_data: `manage_bot_${BID}`}]]}})
        }
        state[chatId] = { awaitingSumToConvertBotBalance: true, BID: BID }
    }
    if (data.startsWith('changeNameBot_')) {
        const BID = data.split('changeNameBot_')[1]
        if (language === 'ru') {
            bot.editMessageText(`*–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è –±–æ—Ç–∞ :*`, {chat_id: chatId, message_id: messageId, parse_mode: 'Markdown', reply_markup: {inline_keyboard: [[{text: 'üîô –ù–∞–∑–∞–¥', callback_data: `manage_bot_${BID}`}]]}})
        } else if (language === 'ua') {
            bot.editMessageText(`*–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ —ñ–º'—è –¥–ª—è –±–æ—Ç–∞ :*`, {chat_id: chatId, message_id: messageId, parse_mode: 'Markdown', reply_markup: {inline_keyboard: [[{text: 'üîô –ù–∞–∑–∞–¥', callback_data: `manage_bot_${BID}`}]]}})
        }
        state[chatId] = { awaitingNewNameForBot: true, BID: BID }
    }
    if (data.startsWith('changeTokenBot_')) {
        const BID = data.split('changeTokenBot_')[1]
        if (language === 'ru') {
            bot.editMessageText(`*–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –±–æ—Ç–∞ :*`, {chat_id: chatId, message_id: messageId, parse_mode: 'Markdown', reply_markup: {inline_keyboard: [[{text: 'üîô –ù–∞–∑–∞–¥', callback_data: `manage_bot_${BID}`}]]}})
        } else if (language === 'ua') {
            bot.editMessageText(`*–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π —Ç–æ–∫–µ–Ω –¥–ª—è –±–æ—Ç–∞ :*`, {chat_id: chatId, message_id: messageId, parse_mode: 'Markdown', reply_markup: {inline_keyboard: [[{text: 'üîô –ù–∞–∑–∞–¥', callback_data: `manage_bot_${BID}`}]]}})
        }
        state[chatId] = { awaitingNewTokenForBot: true, BID: BID }
    }
    if (data.startsWith('changeAdminIdBot_')) {
        const BID = data.split('changeAdminIdBot_')[1]
        if (language === 'ru') {
            bot.editMessageText(`*–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞ –¥–ª—è –±–æ—Ç–∞ :*`, {chat_id: chatId, message_id: messageId, parse_mode: 'Markdown', reply_markup: {inline_keyboard: [[{text: 'üîô –ù–∞–∑–∞–¥', callback_data: `manage_bot_${BID}`}]]}})
        } else if (language === 'ua') {
            bot.editMessageText(`*–í–≤–µ–¥—ñ—Ç—å –∞–π–¥—ñ –Ω–æ–≤–æ–≥–æ –∞–¥–º—ñ–Ω–∞ –¥–ª—è –±–æ—Ç–∞ :*`, {chat_id: chatId, message_id: messageId, parse_mode: 'Markdown', reply_markup: {inline_keyboard: [[{text: 'üîô –ù–∞–∑–∞–¥', callback_data: `manage_bot_${BID}`}]]}})
        }
        state[chatId] = { awaitingNewAdminIDForBot: true, BID: BID }
    }
        if (data === 'statusProject') {
        let message
        const language = await languageUser(chatId)
        const users = await db.collection('users').findOne({})
        const today = new Date();
        const formattedToday = today.toLocaleDateString('en-US', { timeZone: 'Europe/Kiev' });
        const newUsersToday = await db.collection('users').countDocuments({
            registrationDate: {
                $regex: `^${formattedToday}`
            }
        });
        if (language === 'ru') {
            message = '*üöÄ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞:*\n\n' +
                `üïú –†–∞–±–æ—Ç–∞–µ–º : *${Math.floor((new Date() - new Date('2024-05-19')) / (1000 * 3600 * 24))} –¥–Ω–µ–π*\n
` +
                `üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: *${await db.collection('users').countDocuments()}*
` +
                `‚úàÔ∏è –ù–æ–≤—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è: *${newUsersToday}*
` +
                `
ü§ñ –ë–æ—Ç–æ–≤ –ø—Ä–æ–¥–∞–Ω–æ: *${await getTotalBuys()}*`
        } else if (language === 'ua') {
            message = '*üöÄ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç—É:*\n\n' +
                `üïú –ü—Ä–∞—Ü—é—î–º–æ : *${Math.floor((new Date() - new Date('2024-05-19')) / (1000 * 3600 * 24))} –¥–Ω—ñ–≤*\n
` +
                `üë• –í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: *${await db.collection('users').countDocuments()}*
` +
                `‚úàÔ∏è –ù–æ–≤–∏—Ö –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ: *${newUsersToday}*
` +
                `
ü§ñ –ë–æ—Çi–≤ –ø—Ä–æ–¥–∞–Ω–æ: *${await getTotalBuys()}*`
        }
        bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown'
        })
    }
    if (data === 'clientChat') {
        const user = await db.collection('users').findOne({chatId: chatId})
        if (user.bots.length >= 1) {
            const chatMember = await bot.getChatMember(chatIdChannel, chatId);
            if (chatMember.status === 'member' || chatMember.status === 'administrator' || chatMember.status === 'creator') {
                if (language === 'ru') {
                    bot.sendMessage(chatId, '–í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∑–∞–∫—Ä—ã—Ç–æ–≥–æ —á–∞—Ç–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤.');
                } else if (language === 'ua') {
                    bot.sendMessage(chatId, '–í–∏ –≤–∂–µ —î —É—á–∞—Å–Ω–∏–∫–æ–º –∑–∞–∫—Ä–∏—Ç–æ–≥–æ —á–∞—Ç—É –∫–ª—ñ—î–Ω—Ç—ñ–≤.');
                }
            } else {
                if (language === 'ru') {
                    const link = await bot.createChatInviteLink(chatIdChannel, {name: "–û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è —Å—Å—ã–ª–∫–∞", expire_date: Math.floor(Date.now() / 1000) + 86400, member_limit: 1});
                    bot.editMessageText('–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –∑–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤.', {chat_id: chatId, message_id: messageId, reply_markup: {inline_keyboard: [[{text: '–í—Å—Ç—É–ø–∏—Ç—å –≤ —á–∞—Ç', url: link.invite_link}]]}});
                } else if (language === 'ua') {
                    const link = await bot.createChatInviteLink(chatIdChannel, {name: "–û–¥–Ω–æ—Ä–∞–∑–æ–≤–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è", expire_date: Math.floor(Date.now() / 1000) + 86400, member_limit: 1});
                    bot.editMessageText('–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É, —â–æ–± –ø–µ—Ä–µ–π—Ç–∏ —É –∑–∞–∫—Ä–∏—Ç–∏–π —á–∞—Ç –∫–ª—ñ—î–Ω—Ç—ñ–≤.', {chat_id: chatId, message_id: messageId, reply_markup: {inline_keyboard: [[{text: '–í—Å—Ç—É–ø–∏—Ç–∏ –≤ —á–∞—Ç', url: link.invite_link}]]}});
                }
            }
        } else {
            if (language === 'ru') {
                await bot.answerCallbackQuery(callbackQuery.id, {
                    text: 'üö´ –£ –í–∞—Å –Ω–µ—Ç—É –±–æ—Ç–æ–≤.\n–ö—É–ø–∏—Ç–µ –±–æ—Ç–∞ –∏ –í—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É —á–∞—Ç—É.',
                    show_alert: true
                });
            } else if (language === 'ua') {
                await bot.answerCallbackQuery(callbackQuery.id, {
                    text: 'üö´ –£ –í–∞—Å –Ω–µ–º–∞—î –±–æ—Ç—ñ–≤.\n–ü—Ä–∏–¥–±–∞–π—Ç–µ –±–æ—Ç–∞ —ñ –í–∏ –æ—Ç—Ä–∏–º–∞–µ—Ç–µ –¥–æ—Å—Ç—É–ø –¥–æ –∑–∞–∫—Ä–∏—Ç–æ–≥–æ —á–∞—Ç—É.',
                    show_alert: true
                });
            }
        }
    }
    if (data === 'changeLanguage') {
        if (language === 'ru') {
            await db.collection('users').findOneAndUpdate(
                { chatId: chatId },
                { $set: { language: 'ua' } }
            );
            bot.sendMessage(chatId, '‚úÖ –ú–æ–≤–∞ –∑–º—ñ–Ω–µ–Ω–∞.', {
                reply_markup: {
                    keyboard: [
                        ['üßë‚Äçüè´ –ó–∞–º–æ–≤–∏—Ç–∏ –±–æ—Ç', 'üîë –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å'],
                        ['üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å', 'ü¶æ –ü–∞—Ä—Ç–Ω–µ—Ä–∏'],
                        ['üåã –õ–∞–≤–∫–∞ –±–æ—Ç—ñ–≤', 'üóΩ –Ü–Ω—à–µ']
                    ],
                    resize_keyboard: true
                }
            });
        } else if (language === 'ua') {
            await db.collection('users').findOneAndUpdate(
                { chatId: chatId },
                { $set: { language: 'ru' } }
            );
            bot.sendMessage(chatId, '‚úÖ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω—ë–Ω.', {
                reply_markup: {
                    keyboard: [
                        ['üßë‚Äçüè´ –ó–∞–∫–∞–∑–∞—Ç—å –±–æ—Ç–∞', 'üîë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å'],
                        ['üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', 'ü¶æ –ü–∞—Ä—Ç–Ω—ë—Ä—ã'],
                        ['üåã –õ–∞–≤–∫–∞ –±–æ—Ç–æ–≤', 'üóΩ –î—Ä—É–≥–æ–µ']
                    ],
                    resize_keyboard: true
                }
            });
        }
    }
    if (data === 'createTiketHelpManager') {
        let message
        let inlineKeyboard

        if (language === 'ru') {
            message = '‚ùî –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –≤–∞–º –æ—Ç–≤–µ—Ç–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø–æ–º–æ—â–∏ :'
            inlineKeyboard = [[{text: 'üîô –û—Ç–º–µ–Ω–∞', callback_data: 'cancelCreateTiketHelpManager'}]]
        } else if (language === 'ua') {
            message = '‚ùî –û–ø–∏—à—ñ—Ç—å –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É, —ñ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º –≤–∞–º –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –¥–æ–ø–æ–º–æ–≥–∏ :'
            inlineKeyboard = [[{text: 'üîô –í—ñ–¥–º—ñ–Ω–∞', callback_data: 'cancelCreateTiketHelpManager'}]]
        }
        bot.sendMessage(chatId, message, {
            reply_markup: {
                inline_keyboard: inlineKeyboard
            }
        })
        state[chatId] = { awaitingTextForHelpTiket: true }
    }
    if (data === 'cancelCreateTiketHelpManager') {
        state[chatId].awaitingTextForHelpTiket = false
        let message
        if (language === 'ru') {
            message = '–û—Ç–º–µ–Ω–µ–Ω–æ.'
        } else if (language === 'ua') {
            message = '–í—ñ–¥–º—ñ–Ω–µ–Ω–æ.'
        }
        bot.editMessageText(message, {chat_id: chatId, message_id: messageId})
    }
    if (data.startsWith('giveAnswer_')){
        const tiketId = data.split('giveAnswer_')[1]
        const tiketDB = await db.collection('tiketsHelp').findOne({tiketId: tiketId})
        if (tiketDB.statusTiket === false) {
            return
        }
        if (tiketDB.managerId !== null) {
            bot.sendMessage(chatId, 'üö´ –≠—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–∂–µ –æ—Ç–≤–µ—á–∞–µ—Ç –¥—Ä—É–≥–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä.')
            return
        }
        await db.collection('tiketsHelp').findOneAndUpdate({tiketId: tiketId}, {$set: {managerId: chatId}})
        bot.sendMessage(chatId, '–°–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é : ')
        state[chatId] = { userIdHelp: tiketDB.userIdHelp, tiketId: tiketId, awaitingNewMessageForHelpFromManager: true}
    }
    if (data.startsWith('giveAnswerToUser_')) {
        const tiketId = data.split('_')[1]
        const tiketDB = await db.collection('tiketsHelp').findOne({tiketId: tiketId})
        if (tiketDB.statusTiket === false) {
            return
        }
        const userHelp = tiketDB.userIdHelp
        state[chatId] = {tiketId: tiketId, userIdHelp: userHelp, awaitingNewHelpMessageFromManager: true}
        bot.sendMessage(chatId, '–°–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä—É : ')
    }
    if (data.startsWith('giveAnswerToMeneger_')) {
        const tiketId = data.split('_')[1]
        const tiketDB = await db.collection('tiketsHelp').findOne({tiketId: tiketId})
        if (tiketDB.statusTiket === false) {
            return
        }
        const managerId = tiketDB.managerId
        let message
        if (language === 'ru') {
            message = '–°–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä—É : '
        } else if (language === 'ua') {
            message = '–ù–∞—Å—Ç—É–ø–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º –Ω–∞–ø–∏—à—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å –º–µ–Ω–µ–¥–∂–µ—Ä—É :'
        }
        bot.sendMessage(chatId, message)
        state[chatId] = {tiketId: tiketId, managerId: managerId, awaitingNewHelpMessageFromUser: true}
        return
    }
    if (data.startsWith('closeTiketByUser_')) {
        const tiketId = data.split('_')[1]
        const tiketDB = await db.collection('tiketsHelp').findOne({tiketId: tiketId})
        if (tiketDB.statusTiket === false) {
            return
        }
        await db.collection('tiketsHelp').findOneAndUpdate({tiketId: tiketId}, {$set: {statusTiket: false}})
        const managerId = tiketDB.managerId
        let ManagerMessage = `*${tiketId} - –ë—ã–ª –∑–∞–∫—Ä—ã—Ç –ø–æ–ª—å–∑—ã–≤–∞—Ç–µ–ª—è–º.*`
        let message
        if (language === 'ru') {
            message = `*${tiketId}* - –ë—ã–ª –∑–∞–∫—Ä—ã—Ç.\n\n_–û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–∞–º –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –±—É–¥–µ—Ç –ø–æ–º–æ—â—å! –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è_`
        } else if (language === 'ua') {
            message = `*${tiketId}* - –ë—É–≤ –∑–∞–∫—Ä–∏—Ç–∏–π.\n\n_–ó–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å –¥–æ –Ω–∞—Å, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –±—É–¥–µ –¥–æ–ø–æ–º–æ–≥–∞! –ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—è_`
        }
        bot.sendMessage(managerId, ManagerMessage, {parse_mode: 'Markdown'})
        bot.editMessageText(message, {chat_id: chatId, message_id: messageId, parse_mode: 'Markdown'})
    }
    if (data.startsWith('closeTiketByManager_')) {
        const tiketId = data.split('_')[1]
        const tiketDB = await db.collection('tiketsHelp').findOne({tiketId: tiketId})
        if (tiketDB.statusTiket === false) {
            return
        }
        await db.collection('tiketsHelp').findOneAndUpdate({tiketId: tiketId}, {$set: {statusTiket: false}})
        const userHelp = tiketDB.userIdHelp
        let ManagerMessage = `*${tiketId} - –ë—ã–ª –∑–∞–∫—Ä—ã—Ç –≤–∞–º–∏.*`
        let message
        let language = await languageUser(userHelp)
        if (language === 'ru') {
            message = `*${tiketId}* - –ë—ã–ª –∑–∞–∫—Ä—ã—Ç.\n\n_–û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–∞–º –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –±—É–¥–µ—Ç –ø–æ–º–æ—â—å! –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è_`
        } else if (language === 'ua') {
            message = `*${tiketId}* - –ë—É–≤ –∑–∞–∫—Ä–∏—Ç–∏–π.\n\n_–ó–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å –¥–æ –Ω–∞—Å, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –±—É–¥–µ –¥–æ–ø–æ–º–æ–≥–∞! –ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—è_`
        }
        bot.sendMessage(chatId, ManagerMessage, {parse_mode: 'Markdown'})
        bot.sendMessage(userHelp, message, {parse_mode: 'Markdown'})
    }
})
bot.on('message', async (msg) => {
    const chatId = msg.chat.id
    const text = msg.text
    const language = await languageUser(chatId)

    if (state[chatId]?.awaitingTTForReSellBot) {
        state[chatId].awaitingTTForReSellBot = false
        state[chatId].TT = text
        let message
        if (language === 'ru') {
            message = '–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ :\n\n\n_T–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–∫—Ç–∏–≤–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–∏ 48 —á–∞—Å–æ–≤ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏_'
        } else if (language === "ua") {
            message = '–í–≤–µ–¥—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ç–µ—Å—Ç–æ–≤–∏–π –±–æ—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ :\n\n\n_–¢–µ—Å—Ç–æ–≤–∏–π –±–æ—Ç –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –∞–∫—Ç–∏–≤–Ω–∏–º –ø—Ä–æ—Ç—è–≥–æ–º 48 –≥–æ–¥–∏–Ω –∑ –º–æ–º–µ–Ω—Ç—É –ø–æ–¥–∞–Ω–Ω—è –∑–∞—è–≤–∫–∏_'
        }
        bot.sendMessage(chatId, message, {parse_mode: 'Markdown'})
        state[chatId].awaitingTestLinkForReSellBot = true
        return
    }
    if (state[chatId]?.awaitingTestLinkForReSellBot) {
        state[chatId].awaitingTestLinkForReSellBot = false
        state[chatId].TestLink = text
        let message
        if (language === 'ru') {
            message = '–í–≤–µ–¥–∏—Ç–µ —Å–ø–æ—Å–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏ :\n\n\n_Telegram: @user123, Discord: user123, Phone number: +380XXXXXXXXX_'
        } else if (language === "ua") {
            message = "–í–≤–µ–¥—ñ—Ç—å —Å–ø–æ—Å–æ–±–∏ –∑–≤'—è–∑–∞—Ç–∏—Å—è –∑ –≤–∞–º–∏:\n\n\n_Telegram: @user123, Discord: user123, Phone number: +380XXXXXXXXX_"
        }
        bot.sendMessage(chatId, message, {parse_mode: 'Markdown'})
        state[chatId].awaitingWaysToContact = true
        return
    }
    if (state[chatId]?.awaitingWaysToContact) {
        state[chatId].awaitingWaysToContact = false
        const TechnikTask = state[chatId].TT
        const TestLink = state[chatId].TestLink
        const contacts = text
        let message
        if (language === "ru") {
            message = '*‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!*\n\n\n_–í —Ç–µ—á–µ–Ω–∏–∏ 5 —Ä–æ–±–æ—á–∏—Ö –¥–Ω–µ–π —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è._'
        } else if (language === 'ua') {
            message = '*‚úÖ –í–∞—à—É –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–æ–¥–∞–∂ –±–æ—Ç–∞ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é!*\n\n\n_–ü—Ä–æ—Ç—è–≥–æ–º 5 —Ä–æ–±–æ—á–∏—Ö –¥–Ω—ñ–≤ –∑ –≤–∞–º–∏ –∑–≤`—è–∂—É—Ç—å—Å—è._'
        }
        bot.sendMessage(chatId, message, {parse_mode: 'Markdown'})
        await sendTiketForReSellBot(TechnikTask, TestLink, contacts, chatId)
    }
    if (state[chatId]?.awaitingTextForHelpTiket) {
        state[chatId].awaitingTextForHelpTiket = false
        const textTiket = text
        const tiketId = await generateTiketIdOnly()
        const timeReg = new Date().toLocaleString('en-US', { timeZone: 'Europe/Kiev' })
        let message
        await db.collection('tiketsHelp').insertOne({
            statusTiket: true,
            userIdHelp: chatId,
            managerId: null,
            tiketId: tiketId,
            messages: [],
            regTimeTiket: timeReg,
        })
        await db.collection('tiketsHelp').findOneAndUpdate({tiketId: tiketId}, {$push: {messages: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - ${textTiket}`}})
        if (language === 'ru') {
            message = `*‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º.*

_–í–∞—à Tiket ID_ - \`${tiketId}\`
_–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞_ - *${timeReg}*`
        } else if (language === 'ua') {
            message = `*‚úÖ –í–∞—à –∑–∞–ø–∏—Ç —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º.*

_–í–∞—à Tiket ID_ - \`${tiketId}\`
_–ß–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—É_ - *${timeReg}*`
        }

        bot.sendMessage(chatId, message, {parse_mode: 'Markdown'})

        await sendHelpTiket(chatId, textTiket, tiketId, timeReg)
    }
    if (state[chatId]?.awaitingNewMessageForHelpFromManager) {
        const userHelp = state[chatId].userIdHelp
        state[chatId].awaitingNewMessageForHelpFromManager = false
        const messageFromManager = text
        console.log(userHelp)
        const language = await languageUser(userHelp)
        const tiketId = state[chatId].tiketId
        await db.collection('tiketsHelp').findOneAndUpdate({tiketId: tiketId}, {$push: {messages: `–ú–µ–Ω–µ–¥–∂–µ—Ä - ${messageFromManager}`}})
        bot.sendMessage(chatId, '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. ', {
            reply_markup: {
                inline_keyboard: [
                    [{text: '–ù–∞–ø–∏—Å–∞—Ç—å –µ—â–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', callback_data: `giveAnswerToUser_${tiketId}`}, {text: '–ó–∞–∫—Ä—ã—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫—É', callback_data: `closeTiketByManager_${tiketId}`}]
                ]
            }
        })
        let message
        let message2
        let inlineKeyboard
        if (language === 'ru') {
            message = `*–û—Ç–≤–µ—Ç –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ -*`
            message2 = `_–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É - –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É_ *"–û—Ç–≤–µ—Ç–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É"*`
            inlineKeyboard = [[{text: '–û—Ç–≤–µ—Ç–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É', callback_data: `giveAnswerToMeneger_${tiketId}`}, {text: '–ó–∞–∫—Ä—ã—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫—É', callback_data: `closeTiketByUser_${tiketId}`}]]
        } else if (language === 'ua') {
            message = `*–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ -*`
            message2 = `_–Ø–∫—â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É - –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É_ *"–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É"*`
            inlineKeyboard = [[{text: '–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É', callback_data: `giveAnswerToMeneger_${tiketId}`}, {text: '–ó–∞–∫—Ä–∏—Ç–∏ –ø–µ—Ä–µ–ø–∏—Å–∫—É', callback_data: `closeTiketByUser_${tiketId}`}]]
        }
        bot.sendMessage(userHelp, `${message} 

${messageFromManager}

${message2}`,  {reply_markup: {inline_keyboard: inlineKeyboard}, parse_mode: 'Markdown' })
    }
    if (state[chatId]?.awaitingAmountupToAccountBalance) {
        state[chatId].awaitingAmountupToAccountBalance = false
        const amount = parseFloat(text)
        let message
        if (language === "ru") {
            message = 'üè¶ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è :'
        } else if (language === "ua") {
            message = 'üè¶ –û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è :'
        }
        bot.sendMessage(chatId, message, {reply_markup: {
            inline_keyboard: [
                [{text: 'Ukraine Banks', callback_data: 'byUkrBanks'}],
                [{text: 'USDT TRC-20', callback_data: 'byUsdtTrc20'}, {text: 'USDT ERC-20', callback_data: 'byUsdtErc20'}]
            ]
        }})
        state[chatId].amountUpToPay = amount
    }
    if (state[chatId]?.awaitingNewHelpMessageFromManager) {
        state[chatId].awaitingNewHelpMessageFromManager = false
        const messageFromManager = text
        const userHelp = state[chatId].userIdHelp
        const tiketId = state[chatId].tiketId
        await db.collection('tiketsHelp').findOneAndUpdate({tiketId: tiketId}, {$push: {messages: `–ú–µ–Ω–µ–¥–∂–µ—Ä - ${messageFromManager}`}})
        const tiketDB = await db.collection('tiketsHelp').findOne({tiketId: tiketId})
        bot.sendMessage(chatId, '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. ', {
            reply_markup: {
                inline_keyboard: [
                    [{text: '–ù–∞–ø–∏—Å–∞—Ç—å –µ—â–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', callback_data: `giveAnswerToUser_${tiketId}`}, {text: '–ó–∞–∫—Ä—ã—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫—É', callback_data: `closeTiketByManager_${tiketId}`}]
                ]
            }
        })
        let message
        let message2
        let inlineKeyboard
        if (await languageUser(userHelp) === 'ru') {
            message = `*–û—Ç–≤–µ—Ç –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ -*`
            message2 = `_–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É - –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É_ *"–û—Ç–≤–µ—Ç–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É"*`
            inlineKeyboard = [[{text: '–û—Ç–≤–µ—Ç–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É', callback_data: `giveAnswerToMeneger_${tiketId}`}, {text: '–ó–∞–∫—Ä—ã—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫—É', callback_data: `closeTiketByUser_${tiketId}`}]]
        } else if (await languageUser(userHelp) === 'ua') {
            message = `*–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ -*`
            message2 = `_–Ø–∫—â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É - –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É_ *"–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É"*`
            inlineKeyboard = [[{text: '–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É', callback_data: `giveAnswerToMeneger_${tiketId}`}, {text: '–ó–∞–∫—Ä–∏—Ç–∏ –ø–µ—Ä–µ–ø–∏—Å–∫—É', callback_data: `closeTiketByUser_${tiketId}`}]]
        }
        bot.sendMessage(userHelp, `${message} 

${messageFromManager}

${message2}`,  {reply_markup: {inline_keyboard: inlineKeyboard}, parse_mode: 'Markdown' })
    }
    if (state[chatId]?.awaitingNewHelpMessageFromUser) {
        state[chatId].awaitingNewHelpMessageFromUser = false
        const messageFromUser = text
        const managerId = state[chatId].managerId
        const tiketId = state[chatId].tiketId
        await db.collection('tiketsHelp').findOneAndUpdate({tiketId: tiketId}, {$push: {messages: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - ${messageFromUser}`}})
        const tiketDB = await db.collection('tiketsHelp').findOne({tiketId: tiketId})
        let message
        let inlineKeyboard
        if (await languageUser(chatId) === 'ru') {
            message = `*–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É.*`
            inlineKeyboard = [[{text: '–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É', callback_data: `giveAnswerToMeneger_${tiketId}`}, {text: '–ó–∞–∫—Ä—ã—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫—É', callback_data: `closeTiketByUser_${tiketId}`}]]
        } else if (await languageUser(chatId) === 'ua') {
            message = `*–í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É.*`
            inlineKeyboard = [[{text: '–ù–∞–ø–∏—Å–∞—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É', callback_data: `giveAnswerToMeneger_${tiketId}`}, {text: '–ó–∞–∫—Ä–∏—Ç–∏ –ø–µ—Ä–µ–ø–∏—Å–∫—É', callback_data: `closeTiketByUser_${tiketId}`}]]
        }
        bot.sendMessage(chatId, `${message}`,  {reply_markup: {inline_keyboard: inlineKeyboard}, parse_mode: 'Markdown' })
        bot.sendMessage(managerId, `*–û—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è -*

${messageFromUser}

_–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é - –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É_ *"–û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"*`, {parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{text: '–û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', callback_data: `giveAnswerToUser_${tiketId}`}, {text: '–ó–∞–∫—Ä—ã—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫—É', callback_data: `closeTiketByManager_${tiketId}`}]
                ]
            }
        })
    }
    if (state[chatId]?.awaitingSumToConvertBotBalance) {
        const amount = parseFloat(text)
        const BID = state[chatId].BID
        let message
        delete state[chatId]
        if (!isNaN(amount)) {
            const user = await db.collection('users').findOne({chatId: chatId})
            if (user.balance < amount) {
                if (language === "ru") {
                    message = '*üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ*'
                } else if (language === 'ua') {
                    message = '*üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ –Ω–∞ –≤–∞—à–æ–º—É –±–∞–ª–∞–Ω—Å—ñ*'
                }
                bot.sendMessage(chatId, message, {parse_mode: 'Markdownüö´ –í–∏ –≤–≤–µ–ª–∏ –Ω–µ –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ. –í–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–µ —á–∏—Å–ª–æ'})
                return
            }
            await db.collection('users').findOneAndUpdate({chatId: chatId}, {
                $inc: {
                    balance: -amount
                }
            });
            await db.collection('botsUser').findOneAndUpdate({BID: BID}, {
                $inc: {
                    balanceBot: amount
                }
            });
            if (language === 'ru') {
                message = `*‚úÖ –£—Å–ø–µ—à–Ω–æ! –°—á—ë—Ç –±–æ—Ç–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${amount}‚Ç¥*`
            } else if (language === 'ua') {
                message = `*‚úÖ –£—Å–ø—ñ—à–Ω–æ! –†–∞—Ö—É–Ω–æ–∫ –±–æ—Ç–∞ –ø–æ–ø–æ–≤–Ω–µ–Ω–∏–π –Ω–∞ ${amount}‚Ç¥*`
            }
            bot.sendMessage(chatId, message, {parse_mode: 'Markdown'})
        } else {
            if (language === 'ru') {
                message = '*üö´ –í—ã –≤–≤–µ–ª–∏ –Ω–µ –∫–æ—Ä–µ—Ç–∫–Ω–æ–µ —á–∏—Å–ª–æ. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–µ–∫—Ç–Ω–æ —á–∏—Å–ª–æ*'
            } else if (language === 'ua') {
                message = '*üö´ –í–∏ –≤–≤–µ–ª–∏ –Ω–µ –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ. –í–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–µ —á–∏—Å–ª–æ*'
            }
            bot.sendMessage(chatId, message, {parse_mode: 'Markdown'})
        }
    }
    if (state[chatId]?.awaitingActivaatePromocode) {
        const promocodeName = text
        const promocodeInfo = await db.collection('promocodes').findOne({promocode: promocodeName})
        let message
        state[chatId].awaitingActivaatePromocode = false
        if (promocodeInfo) {
            if (!promocodeInfo.chatIdsUsed.includes(chatId)) {
                if (promocodeInfo.uses > promocodeInfo.chatIdsUsed.length) {
                    await db.collection('promocodes').findOneAndUpdate({promocode: promocodeName}, {$push: {chatIdsUsed: chatId}})
                    await db.collection('users').findOneAndUpdate({chatId: chatId}, {$inc: {balance: 200}})
                    if (language === "ru") {
                        message = '‚úÖ –£—Å–ø–µ—à–Ω–æ! –í—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å!'
                    } else if (language === "ua") {
                        message = '‚úÖ –£—Å–ø—ñ—à–Ω–æ! –í–∏ –∞–∫—Ç–∏–≤—É–≤–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å–≤—ñ–π –±–∞–ª–∞–Ω—Å!'
                    }
                } else {
                    if (language === 'ru') {
                        message = 'üö´ –≠—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∏–∑—Ä–∞—Å—Ö–æ–¥–æ–≤–∞–Ω'
                    } else if (language === 'ua') {
                        message = 'üö´ –¶–µ–π –ø—Ä–æ–º–æ–∫–æ–¥ –≤–∂–µ –≤–∏—Ç—Ä–∞—á–µ–Ω–æ'
                    }
                }
            } else {
                if (language === 'ru') {
                    message = 'üö´ –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥.'
                } else if (language === 'ua') {
                    message = 'üö´ –í–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–ª–∏ —Ü–µ–π –ø—Ä–æ–º–æ–∫–æ–¥.'
                }
            }
        } else {
            if (language === 'ru') {
                message = 'üö´ –í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑'
            } else if (language === 'ua') {
                message = 'üö´ –í–∏ –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –ø—Ä–æ–º–æ–∫–æ–¥. —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑'
            }
        }
        bot.sendMessage(chatId, `*${message}*`, {parse_mode: 'Markdown'})
    }
    if (state[chatId]?.awaitingNewNameForBot) {
        const newdata = text
        const BID = state[chatId].BID
        let message
        await db.collection('botsUser').findOneAndUpdate({BID: BID}, {
            $set: {
                botName: newdata
            }
        });
        if (language === 'ru') {
            message = `*‚úÖ –£—Å–ø–µ—à–Ω–æ! –ù–æ–≤–æ–µ –∏–º—è –±–æ—Ç–∞ –∏–∑–º–µ–Ω–æ –Ω–∞ ${newdata}*`
        } else if (language === 'ua') {
            message = `*‚úÖ –£—Å–ø—ñ—à–Ω–æ! –ù–æ–≤–µ —ñ–º'—è –±–æ—Ç–∞ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ ${newdata}*`
        }
        bot.sendMessage(chatId, message, {parse_mode: 'Markdown'})
        delete state[chatId]
    }
    if (state[chatId]?.awaitingNewAdminIDForBot) {
        const newdata = parseFloat(text)
        const BID = state[chatId].BID
        let message
        await db.collection('botsUser').findOneAndUpdate({BID: BID}, {
            $set: {
                adminId: newdata
            }
        });
        if (language === 'ru') {
            message = `*‚úÖ –£—Å–ø–µ—à–Ω–æ! –ê–¥–º–∏–Ω –±–æ—Ç–∞ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ ${newdata} ID*`
        } else if (language === 'ua') {
            message = `*‚úÖ –£—Å–ø—ñ—à–Ω–æ! –ê–¥–º—ñ–Ω –±–æ—Ç–∞ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ ${newdata} ID*`
        }
        bot.sendMessage(chatId, message, {parse_mode: 'Markdown'})
        delete state[chatId]
    }
    if (state[chatId]?.awaitingNewTokenForBot) {
        const newdata = text
        const BID = state[chatId].BID
        let message
        await db.collection('botsUser').findOneAndUpdate({BID: BID}, {
            $set: {
                token: newdata
            }
        });
        if (language === 'ru') {
            message = `*‚úÖ –£—Å–ø–µ—à–Ω–æ! –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑–º–µ–Ω–æ –Ω–∞ ${newdata}*`
        } else if (language === 'ua') {
            message = `*‚úÖ –£—Å–ø—ñ—à–Ω–æ! –ù–æ–≤–∏–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ ${newdata}*`
        }
        bot.sendMessage(chatId, message, {parse_mode: 'Markdown'})
        delete state[chatId]
    }
})
//////////////////////////////////////////////////////////////////////////////////////

                                    // Admin Panel
bot.onText(/\/admin/, (msg) => {
    const chatId = msg.chat.id
    console.log(adminChatId)
    if (adminChatId.includes(chatId.toString())) {
        sendAdminMenu(chatId)
    } else {
        return
    }
})
bot.onText(/–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞–º–∏/, (msg) => {
    const chatId = msg.chat.id
    if (adminChatId.includes(chatId.toString())) {
        bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é :', {
            reply_markup: {
                keyboard: [
                    ['–î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞', '–£–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞'], ['–°–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤'], ['–ù–∞–∑–∞–¥']
                ],
                resize_keyboard: true
            }
        })
    } else {
        return
    }
});
bot.onText(/–ù–∞–∑–∞–¥/, (msg) => {
    const chatId = msg.chat.id
    if (adminChatId.includes(chatId.toString())) {
        sendAdminMenu(chatId)
    } else if (menegerChatId.includes(chatId.toString())) {
        sendMenegerMenu(chatId)
    }

})
bot.onText(/–î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞/, msg => {
    const chatId = msg.chat.id
    if (adminChatId.includes(chatId.toString())) {
        bot.sendMessage(chatId, '–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –±–æ—Ç–∞ :', {
            reply_markup: {
                inline_keyboard: [
                    [{text: '–û—Ç–º–µ–Ω–∞', callback_data: 'cancelAddNewBot'}]
                ]
            }
        })
        state[chatId] = { awaitingNewBotName: true }
    } else {
        return
    }
})
bot.onText(/–£–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞/, async msg => {
    const chatId = msg.chat.id
    if (adminChatId.includes(chatId.toString())) {
        let inlineKeyboard = []
        const bots = await db.collection('bots').find({}).toArray();
        let row = [];
        for (let i = 0; i < bots.length; i += 1) {
            const bot = bots[i];
            row.push({
                text: bot.botName, // –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–µ
                callback_data: `deleteBot_${bot._id}` // Callback –¥–∞–Ω–Ω—ã–µ, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞
            });
            if (row.length === 2) {
                inlineKeyboard.push(row);
                row = [];
            }
        }
        if (row.length > 0) {
            inlineKeyboard.push(row);
        }
        bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å :\n( –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –±–æ—Ç–∞ - –æ–Ω —Å—Ä–∞–∑—É —É–¥–∞–ª–∏—Ç—Å—è )', {reply_markup: {inline_keyboard: inlineKeyboard}})
    } else {
        return
    }
})
bot.onText(/–°–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤/, async msg => {
    const chatId = msg.chat.id
    if (adminChatId.includes(chatId.toString())) {
        const bots = await db.collection('bots').find({}).toArray();
        let row = [];
        let inlineKeyboard = []
        for (let i = 0; i < bots.length; i += 1) {
            const bot = bots[i];
            row.push({
                text: bot.botName, // –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–µ
                callback_data: `infoAboutBot_${bot._id}` // Callback –¥–∞–Ω–Ω—ã–µ, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞
            });
            if (row.length === 2) {
                inlineKeyboard.push(row);
                row = [];
            }
        }
        if (row.length > 0) {
            inlineKeyboard.push(row);
        }
        bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –±–æ—Ç–∞, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å :', {reply_markup: {inline_keyboard: inlineKeyboard}})
    } else {
        return
    }
})
bot.onText(/–ú–µ–Ω–µ–¥–∂–µ—Ä—ã/, (msg) => {
    const chatId = msg.chat.id
    if (adminChatId.includes(chatId.toString())) {
        bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é :', {
            reply_markup: {
                keyboard: [
                    ['–î–æ–±–∞–≤–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞', '–£–¥–∞–ª–∏—Ç—å –º–µ–Ω–µ–¥–∂—Ä–µ—Ä–∞'], ['–°–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤'], ['–ù–∞–∑–∞–¥']
                ],
                resize_keyboard: true
            }
        })
    } else {
        return
    }
})
bot.onText(/–î–æ–±–∞–≤–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞/, msg => {
    const chatId = msg.chat.id
    if (adminChatId.includes(chatId.toString())) {
        bot.sendMessage(chatId, '–ù–∞–ø–∏—à–∏—Ç–µ ID –Ω–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ :', {
            reply_markup: {
                inline_keyboard: [
                    [{text: '–û—Ç–º–µ–Ω–∞', callback_data: 'cancelAddNewManager'}]
                ]
            }
        })
        state[chatId] = { awaitingCreateNewManagerId: true }
    } else {
        return
    }
})
bot.onText(/–£–¥–∞–ª–∏—Ç—å –º–µ–Ω–µ–¥–∂—Ä–µ—Ä–∞/, async msg => {
    const chatId = msg.chat.id
    if (adminChatId.includes(chatId.toString())) {
        let inlineKeyboard = []
        const botOptions = await db.collection('botOptions').findOne({});

        if (!botOptions || !botOptions.managers) {
            bot.sendMessage(chatId, '–°–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
            return;
        }

        const managers = botOptions.managers;
        let row = [];
        for (let i = 0; i < managers.length; i += 1) {
            const manager = managers[i];
            row.push({
                text: manager, // –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–µ
                callback_data: `deleteManager_${manager}` // Callback –¥–∞–Ω–Ω—ã–µ, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞
            });
            if (row.length === 2) {
                inlineKeyboard.push(row);
                row = [];
            }
        }
        if (row.length > 0) {
            inlineKeyboard.push(row);
        }
        bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å :\n( –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ - –æ–Ω —Å—Ä–∞–∑—É —É–¥–∞–ª–∏—Ç—Å—è )', {reply_markup: {inline_keyboard: inlineKeyboard}})
    } else {
        return
    }
});
bot.onText(/–°–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤/, async msg => {
    const chatId = msg.chat.id
    if (adminChatId.includes(chatId.toString())) {
        let inlineKeyboard = []
        const botOptions = await db.collection('botOptions').findOne({});

        if (!botOptions || !botOptions.managers) {
            bot.sendMessage(chatId, '–°–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
            return;
        }

        const managers = botOptions.managers;
        let row = [];
        for (let i = 0; i < managers.length; i += 1) {
            const manager = managers[i];
            row.push({
                text: manager, // –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–µ
                callback_data: `nothingToDo` // Callback –¥–∞–Ω–Ω—ã–µ, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞
            });
            if (row.length === 2) {
                inlineKeyboard.push(row);
                row = [];
            }
        }
        if (row.length > 0) {
            inlineKeyboard.push(row);
        }
        bot.sendMessage(chatId, '–í–æ—Ç —Å–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ :', {reply_markup: {inline_keyboard: inlineKeyboard}})
    } else {
        return
    }
});
bot.on('message', async (msg) => {
    const chatId = msg.chat.id
    const text = msg.text

    const stateData = state[chatId];
    if (!stateData) {
        return;
    }
    if (stateData.awaitingNewBotName) {
        state[chatId] = {
            ...stateData,
            botName: text,
            awaitingNewBotName: false,
            awaitingDescriptionBot: true,
        };
        bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞ : ', {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '–û—Ç–º–µ–Ω–∞', callback_data: 'cancelAddNewBot' }]
                ]
            }
        });
        return;
    }
    if (state[chatId].awaitingCreateNewManagerId) {
        state[chatId].awaitingCreateNewManagerId = false
        const id = text
        await db.collection('botOptions').findOneAndUpdate({_id: new ObjectId('665d272a7611d73e2bec9bac')},{$push: {managers: id}})
        bot.sendMessage(chatId, `‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä - ${id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!`)
        await loadManagers()
        return
    }
    if (stateData.awaitingDescriptionBot) {
        state[chatId] = {
            ...stateData,
            description: text,
            awaitingDescriptionBot: false,
            awaitingUsernameTestBot: true,
        };
        bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ username —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞ "@testBot" : ', {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '–û—Ç–º–µ–Ω–∞', callback_data: 'cancelAddNewBot' }]
                ]
            }
        });
        return;
    }
    if (stateData.awaitingUsernameTestBot) {
        state[chatId] = {
            ...stateData,
            usernameTestBot: text,
            awaitingUsernameTestBot: false,
            awaitingPriceUAH: true,
        };
        bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –±–æ—Ç–∞ –≤ UAH : ', {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '–û—Ç–º–µ–Ω–∞', callback_data: 'cancelAddNewBot' }]
                ]
            }
        });
        return;
    }
    if (stateData.awaitingPriceUAH) {
        state[chatId] = {
            ...stateData,
            priceUAH: parseFloat(text),
            awaitingPriceUAH: false,
            awaitingPriceUSD: true,
        };
        bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –±–æ—Ç–∞ –≤ USD : ', {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '–û—Ç–º–µ–Ω–∞', callback_data: 'cancelAddNewBot' }]
                ]
            }
        });
        return;
    }
    if (stateData.awaitingPriceUSD) {
        const priceUSD = parseFloat(text);
        const { botName, description, usernameTestBot, priceUAH } = stateData;

        bot.sendMessage(chatId, '–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤!');
        await db.collection('bots').insertOne({
            botName,
            description,
            priceUAH,
            priceUSD,
            linkTestBot: usernameTestBot,
            buys: 0,
        });
        state[chatId] = {};
        console.log(`–ù–æ–≤—ã–π –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏!`);
    }
    if (state[chatId]?.awaitingNewBotNameForBot) {
        state[chatId].awaitingNewBotNameForBot = false
        const id = state[chatId].id
        const botName = text
        await db.collection('bots').findOneAndUpdate({_id: new ObjectId(id)}, {$set: {botName: botName}})
        bot.sendMessage(chatId, `–ò–º—è –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ ${botName}`)
        return
    }
    if (state[chatId]?.awaitingNewDescriptionForBot) {
        state[chatId].awaitingNewDescriptionForBot = false
        const id = state[chatId].id
        const descrition = text
        await db.collection('bots').findOneAndUpdate({_id: new ObjectId(id)}, {$set: {description: descrition}})
        bot.sendMessage(chatId, `–û–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ ${descrition}`)
        return
    }
    if (state[chatId]?.awaitingNewLinkForBot) {
        state[chatId].awaitingNewLinkForBot = false
        const id = state[chatId].id
        const linkTestBot = text
        await db.collection('bots').findOneAndUpdate({_id: new ObjectId(id)}, {$set: {linkTestBot: linkTestBot}})
        bot.sendMessage(chatId, `C—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ ${linkTestBot}`)
        return
    }
    if (state[chatId]?.awaitingNewPriceUAHForBot) {
        state[chatId].awaitingNewPriceUAHForBot = false
        const id = state[chatId].id
        const priceUAH = parseFloat(text)
        await db.collection('bots').findOneAndUpdate({_id: new ObjectId(id)}, {$set: {priceUAH: priceUAH}})
        bot.sendMessage(chatId, `–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ USD`)
        state[chatId].awaitingNewPriceUSDForBot = true
        return
    }
    if (state[chatId]?.awaitingNewPriceUSDForBot) {
        state[chatId].awaitingNewPriceUSDForBot = false
        const id = state[chatId].id
        const priceUSD = parseFloat(text)
        await db.collection('bots').findOneAndUpdate({_id: new ObjectId(id)}, {$set: {priceUSD: priceUSD}})
        bot.sendMessage(chatId, `–¶–µ–Ω–∞ –¥–ª—è –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞`)
        return
    }
})
bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const chatUn = callbackQuery.message.chat.username
    const data = callbackQuery.data;
    const messageId = callbackQuery.message.message_id;

    if (data === 'cancelAddNewManager') {
        delete state[chatId]
        bot.sendMessage(chatId, '–û—Ç–º–µ–Ω–µ–Ω–æ.')
    }
    if (data.startsWith('deleteManager_')) {
        const managerId = data.split('deleteManager_')[1];
        await db.collection('botOptions').findOneAndUpdate(
            {},
            { $pull: { managers: managerId } }
        );
        bot.sendMessage(chatId, `–ú–µ–Ω–µ–¥–∂–µ—Ä —Å ID ${managerId} —É–¥–∞–ª–µ–Ω.`);
    }
    if (data === 'cancelAddNewBot') {
        delete state[chatId]
        bot.sendMessage(chatId, '–û—Ç–º–µ–Ω–µ–Ω–æ.')
    }
    if (data.startsWith('deleteBot_')){
        const id = data.split('_')[1]
        const infoBot = await db.collection('bots').findOne({_id: new ObjectId(id)})
        await db.collection('bots').deleteOne({_id: new ObjectId(id)})
        bot.editMessageText( `–ë–æ—Ç *${infoBot.botName}* - —É–¥–∞–ª—ë–Ω`, {chat_id: chatId, message_id: messageId, parse_mode: 'Markdown'})
    }
    if (data.startsWith('deletePromocode_')){
        const id = data.split('_')[1]
        const infoPromocode = await db.collection('promocodes').findOne({_id: new ObjectId(id)})
        await db.collection('promocodes').deleteOne({_id: new ObjectId(id)})
        bot.editMessageText( `–ü—Ä–æ–º–æ–∫–æ–¥ *${infoPromocode.promocode}* - —É–¥–∞–ª—ë–Ω`, {chat_id: chatId, message_id: messageId, parse_mode: 'Markdown'})
    }
    if (data.startsWith('infoAboutBot_')){
        const id = data.split('_')[1]
        const infoBot = await db.collection('bots').findOne({_id: new ObjectId(id)})
        const inlineKeyboard = [[{text: '–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –±–æ—Ç–∞', callback_data: `changeNameAdminBot_${id}`}], [{text: '–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É –±–æ—Ç–∞', callback_data: `changePriceBot_${id}`}, {text: '–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞', callback_data: `changeDiscriptonBot_${id}`}], [{text: '–ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞', callback_data: `changeLinkToTestBot_${id}`}]]
        bot.editMessageText( `_–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ_ - *${infoBot.botName}*\n\n_–¶–µ–Ω–∞ –±–æ—Ç–∞_ - *${infoBot.priceUAH} UAH* | *${infoBot.priceUSD} USD*\n\n_–û–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞_ - \n\n${infoBot.description}\n\n_–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞_ - *${infoBot.linkTestBot}*\n\n_–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫ –±–æ—Ç–∞_ - *${infoBot.buys}* `, {chat_id: chatId, message_id: messageId, parse_mode: 'Markdown', reply_markup: {inline_keyboard: inlineKeyboard}})
    }
    if (data.startsWith('changeLinkToTestBot_')) {
        const id = data.split('_')[1]
        bot.sendMessage(chatId, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞ ( —Ñ–æ—Ä–º–∞—Ç: @test_bot )')
        state[chatId] = { awaitingNewLinkForBot: true, id: id }
    }
    if (data.startsWith('changeDiscriptonBot_')) {
        const id = data.split('_')[1]
        bot.sendMessage(chatId, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –±–æ—Ç–∞')
        state[chatId] = { awaitingNewDescriptionForBot: true, id: id }
    }
    if (data.startsWith('changePriceBot_')) {
        const id = data.split('_')[1]
        bot.sendMessage(chatId, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–æ—Ç–∞ –≤ UAH')
        state[chatId] = { awaitingNewPriceUAHForBot: true, id: id }
    }
    if (data.startsWith('changeNameAdminBot_')) {
        const id = data.split('_')[1]
        bot.sendMessage(chatId, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è –±–æ—Ç–∞')
        state[chatId] = { awaitingNewBotNameForBot: true, id: id }
    }
    if (data.startsWith('infoPromocode_')){
        const id = data.split('_')[1]
        const infoPromocode = await db.collection('promocodes').findOne({_id: new ObjectId(id)})
        bot.editMessageText( `_–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–º–æ–∫–æ–¥–µ_ - *${infoPromocode.promocode}*\n\n_–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑—ã–≤–∞–Ω–∏–π_ - *${infoPromocode.chatIdsUsed.length}/${infoPromocode.uses}*`, {chat_id: chatId, message_id: messageId, parse_mode: 'Markdown', reply_markup: {inline_keyboard: [[{text: '–°–ø–∏—Å–æ–∫ –ª—é–¥–µ–π –∫—Ç–æ –∏—Å–ø–æ–ª—å–∑—ã–≤–∞–ª –ø—Ä–æ–º–æ–∫–æ–¥', callback_data: `listOfPromocodeUsesChatId_${id}`}]]}})
    }
    if (data.startsWith('listOfPromocodeUsesChatId_')) {
        const id = data.split('_')[1];
        const infoPromocode = await db.collection('promocodes').findOne({ _id: new ObjectId(id) });
        const chatIdsUsed = infoPromocode.chatIdsUsed;
        let message = '';

        if (chatIdsUsed.length === 0) {
            message = '–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –≤–≤–µ–ª–∏ –¥–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥';
        } else {
            for (let i = 0; i < chatIdsUsed.length; i += 1) {
                const userId = chatIdsUsed[i];
                message += i+1 + '. ' + userId + '\n';
            }
        }

        bot.editMessageText(message, { chat_id: chatId, message_id: messageId });
    }
})

//////////////////////////////////////////////////////////////////////////////////////
                                    //MANAGER MENU
bot.onText(/\/manager/, (msg) => {
    const chatId = msg.chat.id
    console.log(adminChatId)
    if (menegerChatId.includes(chatId).toString() || adminChatId.includes(chatId.toString())) {
        sendMenegerMenu(chatId)
    } else {
        return
    }
})
bot.onText(/–ü—Ä–æ–º–æ–∫–æ–¥—ã/, async (msg) => {
    const chatId = msg.chat.id
    if (menegerChatId.includes(chatId).toString() || adminChatId.includes(chatId.toString())) {
        bot.sendMessage(chatId, `–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å`, {
            reply_markup: {
                keyboard: [
                    ['–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥', '–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥'], ['–°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤'], ['–ù–∞–∑–∞–¥']
                ],
                resize_keyboard: true
            }
        })
    }
})
bot.onText(/–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥/, async (msg) => {
    const chatId = msg.chat.id
    if (menegerChatId.includes(chatId).toString() || adminChatId.includes(chatId.toString())) {
        bot.sendMessage(chatId, `–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ "–°–ª—É–π—á–∞–π–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è" : `, {
            reply_markup: {
                inline_keyboard: [
                    [{text: '–°–ª—É—á–∞–π–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è', callback_data: 'randomGenerationCode'}]
                ]
            }
        })
        state[chatId] = { awaitingNewPromocodeName: true }
        return
    }
})
bot.onText(/–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥/, async (msg) => {
    const chatId = msg.chat.id
    if (menegerChatId.includes(chatId).toString() || adminChatId.includes(chatId.toString())) {
        let inlineKeyboard = []
        const promocodes = await db.collection('promocodes').find({}).toArray();
        let row = [];
        for (let i = 0; i < promocodes.length; i += 1) {
            const promocode = promocodes[i];
            row.push({
                text: `${promocode.promocode} | ${promocode.uses}`, // –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–µ
                callback_data: `deletePromocode_${promocode._id}` // Callback –¥–∞–Ω–Ω—ã–µ, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞
            });
            if (row.length === 2) {
                inlineKeyboard.push(row);
                row = [];
            }
        }
        if (row.length > 0) {
            inlineKeyboard.push(row);
        }
        bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å :\n( –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –ø—Ä–æ–º–æ–∫–æ–¥ - –æ–Ω —Å—Ä–∞–∑—É —É–¥–∞–ª–∏—Ç—Å—è )', {reply_markup: {inline_keyboard: inlineKeyboard}})
    }
})
bot.onText(/–°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤/, async (msg) => {
    const chatId = msg.chat.id
    if (menegerChatId.includes(chatId).toString() || adminChatId.includes(chatId.toString())) {
        let inlineKeyboard = []
        const promocodes = await db.collection('promocodes').find({}).toArray();
        let row = [];
        for (let i = 0; i < promocodes.length; i += 1) {
            const promocode = promocodes[i];
            row.push({
                text: `${promocode.promocode} | ${promocode.uses}`, // –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–µ
                callback_data: `infoPromocode_${promocode._id}` // Callback –¥–∞–Ω–Ω—ã–µ, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞
            });
            if (row.length === 2) {
                inlineKeyboard.push(row);
                row = [];
            }
        }
        if (row.length > 0) {
            inlineKeyboard.push(row);
        }
        bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å :', {reply_markup: {inline_keyboard: inlineKeyboard}})
    }
})

bot.onText(/–†–∞—Å—Å—ã–ª–∫–∞/, async (msg) => {
    const chatId = msg.chat.id
    if (menegerChatId.includes(chatId).toString() || adminChatId.includes(chatId.toString())) {
        bot.sendMessage(chatId, `–°–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π —É–≤–∏–¥—è—Ç –≤—Å–µ –ø–æ–ª—å–∑—ã–≤–∞—Ç–µ–ª–∏.`, {
            reply_markup: {
                inline_keyboard: [
                    [{text: '–û—Ç–º–µ–Ω–∞', callback_data: 'cancelNewsletter'}]
                ],
            }
        })
        state[chatId] = { awaitingTextNewsletter: true }
    }
})

bot.on('message', async (msg) => {
    const chatId = msg.chat.id
    const chatUn = msg.chat.username
    const messageId = msg.chat.message_id
    const text = msg.text

    if (state[chatId]?.awaitingNewPromocodeName) {
        state[chatId].awaitingNewPromocodeName = false
        const promocodeName = text
        bot.sendMessage(chatId, '–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑—ã–≤–∞–Ω–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–∞ : ')
        state[chatId].awaitingAmountPromocode = true
        state[chatId].promocodeName = promocodeName
        return
    }
    if (state[chatId]?.awaitingTextNewsletter) {
        const TextNewsletter = text
        state[chatId].awaitingTextNewsletter = false
        const users = await db.collection('users').find({}).toArray()
        for (let i = 0; i < users.length; i += 1) {
            const user = users[i];
            bot.sendMessage(user.chatId, text)
        }
        bot.editMessageText('*‚úÖ –£—Å–ø–µ—à–Ω–æ! –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.*', {chat_id: chatId, message_id: messageId, parse_mode: 'Markdown'})
    }
    if (state[chatId]?.awaitingAmountPromocode) {
        if (isNaN(text)) {
            bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.')
            return
        }
        state[chatId].awaitingAmountPromocode = false
        const promocodeName = state[chatId].promocodeName
        await db.collection('promocodes').insertOne({
            promocode: promocodeName,
            uses: parseFloat(text),
            chatIdsUsed: []
        })
        bot.sendMessage(chatId, `–£—Å–ø–µ—à–Ω–æ! 

–í–∞—à –Ω–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ - \`${promocodeName}\` —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.

–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–≥–æ —á—Ç–æ –±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å.`, {parse_mode: 'Markdown'})
        delete state[chatId]
        if (adminChatId.includes(chatId)) {
            sendAdminMenu()
        } else if (menegerChatId.includes(chatId)) {
            sendMenegerMenu()
        }
    }
})
bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const chatUn = callbackQuery.message.chat.username
    const data = callbackQuery.data;
    const messageId = callbackQuery.message.message_id;

    if (data === 'randomGenerationCode') {
        state[chatId].awaitingNewPromocodeName = false
        const promocodeName = await generatePromocodeName()
        state[chatId].promocodeName = promocodeName
        bot.sendMessage(chatId, '–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑—ã–≤–∞–Ω–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–∞ : ')
        state[chatId].awaitingAmountPromocode = true
    }
//////////////////////////////////////////////////////////////////////////////////////
})
async function generatePromocodeName(){
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    let promoCode = '';
    for (let i = 0; i < 8; i++) {
        const randomIndex = Math.floor(Math.random() * chars.length);
        promoCode += chars[randomIndex];
    }
    return promoCode;
}
async function haveBots(chatId) {
    const user = await db.collection('users').findOne({chatId: chatId})
    if (user.bots.length >= 1) {
        return true
    } else {
        return false
    }
}
async function sendMenegerMenu(chatId) {
    bot.sendMessage(chatId, '–ú–µ–Ω–µ–¥–∂–µ—Ä –º–µ–Ω—é :', {
        reply_markup: {
            keyboard: [
                ['–†–∞—Å—Å—ã–ª–∫–∞', '–ü—Ä–æ–º–æ–∫–æ–¥—ã']
            ],
            resize_keyboard: true
        }
    })
}
async function sendAdminMenu(chatId) {
    bot.sendMessage(chatId, '–ê–¥–º–∏–Ω –º–µ–Ω—é :', {
        reply_markup: {
            keyboard: [
                ['–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞–º–∏'], ['–ú–µ–Ω–µ–¥–∂–µ—Ä—ã', '–ü—Ä–æ–º–æ–∫–æ–¥—ã']
            ],
            resize_keyboard: true
        }
    })
}
async function languageUser(chatId) {
    const user = await db.collection('users').findOne({chatId: chatId});
    if (user) {
        return user.language;
    } else {
        console.log(`Error - not a user or user not found. ChatId - ${chatId}`);
        return null; // –Ø–≤–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
    }
}
async function isUser(chatId) {
    const user = db.collection('users').findOne({ chatId: chatId })
    if (user){
        return true
    } else {
        return false
    }
}
async function createNewUser(chatId, chatUn) {
    try {
        const userExists = await db.collection('users').findOne({ chatId: chatId });
        if (!userExists) {
            await db.collection('users').insertOne({
                chatId: chatId,
                username: chatUn,
                balance: 0,
                refBalance: 0,
                statusRefBalance: 0,
                language: 'ru',
                bots: [],
                usersInvited: [],
                registrationDate: new Date().toLocaleString('en-US', { timeZone: 'Europe/Kiev' }),
                notificationsEnabled: true,
            });
            console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${chatId} –¥–æ–±–∞–≤–ª–µ–Ω –≤ MongoDB.`);
        } else {
            console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${chatId} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ MongoDB.`);
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ MongoDB:", error);
    }
}
async function generateBotIdOnly(){
    let newBotId
    let BotIdExists = true
    while (BotIdExists) {
        const randomNumber = Math.floor(Math.random() * 9999) + 1;
        newBotId = `BID-${String(randomNumber).padStart(4, '0')}`;
        const payIdCount = await db.collection('botsUser').countDocuments({ BID: newBotId });
        if (payIdCount === 0) BotIdExists = false;
    }
    return newBotId
}
async function generateTiketIdOnly() {
    let newTiketId
    let TiketIdExists = true
    while (TiketIdExists) {
        const randomNumber = Math.floor(Math.random() * 9999) + 1;
        newTiketId = `Tiket-${String(randomNumber).padStart(4, '0')}`;
        const tiketIdCount = await db.collection('tiketsHelp').countDocuments({ tiketId: newTiketId });
        if (tiketIdCount === 0) TiketIdExists = false;
    }
    return newTiketId
}
async function getTotalBuys() {
    try {
        const botsCollection = db.collection('bots');

        const result = await botsCollection.aggregate([
            {
                $group: {
                    _id: null,
                    totalBuys: { $sum: "$buys" }
                }
            }
        ]).toArray();

        return result.length > 0 ? result[0].totalBuys : 0;
    } catch (error) {
        console.log(error)
    }
}
async function loadManagers() {
    try {
        const botOptions = await db.collection('botOptions').findOne({});
        if (botOptions && botOptions.managers) {
            const managers = botOptions.managers;
            console.log("–°–ø–∏—Å–æ–∫ chatId –ú–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω: ", managers);
            return menegerChatId = managers;
        } else {
            console.error("–ü–æ–ª–µ 'managers' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ 'botOptions'");
            return [];
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: ", error);
        return [];
    }
}

async function loadAdmins() {
    try {
        const botOptions = await db.collection('botOptions').findOne({});
        if (botOptions && botOptions.admins) {
            const admins = botOptions.admins;
            console.log("–°–ø–∏—Å–æ–∫ chatId –ê–¥–º–∏–Ω–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω: ", admins);
            return adminChatId = admins;
        } else {
            console.error("–ü–æ–ª–µ 'admins' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ 'botOptions'");
            return [];
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤: ", error);
        return [];
    }
}

async function sendHelpTiket(userId, HelpMessage, tiketId, timeReg) {
    let message = `*üÜò –ù–æ–≤—ã–π Help Tiket*
    
_User ID -_ ${userId}
_Tiket ID -_ *${tiketId}*
_Time Reg -_ *${timeReg}*
_Language User -_ *${await languageUser(userId)}* 
    
_Message Data -_ 
    
${HelpMessage}`;

    const botOptions = await db.collection('botOptions').findOne({});

    const admins = botOptions.admins; // admins —É–∂–µ –º–∞—Å—Å–∏–≤
    for (let i = 0; i < admins.length; i += 1) {
        const adminId = admins[i];
        bot.sendMessage(adminId, message, {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{text: `–û—Ç–≤–µ—Ç–∏—Ç—å ${tiketId}`, callback_data: `giveAnswer_${tiketId}`}]
                ]
            }
        });
    }

    const managers = botOptions.managers; // managers —É–∂–µ –º–∞—Å—Å–∏–≤
    for (let i = 0; i < managers.length; i += 1) {
        const managerId = managers[i];
        bot.sendMessage(managerId, message, {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{text: `–û—Ç–≤–µ—Ç–∏—Ç—å ${tiketId}`, callback_data: `giveAnswer_${tiketId}`}]
                ]
            }
        });
    }
}
async function addReferral(referrerId, newUserId, chatUn){
    try {
        const referrer = await db.collection('users').findOne({ chatId: parseFloat(referrerId) });
        if (!referrer) {
            console.log(`–†–µ—Ñ–µ—Ä–µ—Ä —Å chatId ${referrerId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
            return;
        }
        const newUserExists = await db.collection('users').findOne({ chatId: newUserId });
        if (parseFloat(referrerId) == newUserId) {
            console.log(`–ü–æ–ø—ã—Ç–∫–∞ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ —Å–≤–æ–µ–π —Ä–µ—Ñ —Å—Å—ã–ª–∫–µ - ${newUserId}`)
            return
        }
        if (!newUserExists) {
            await db.collection('users').insertOne({
                chatId: newUserId,
                username: chatUn,
                balance: 0,
                refBalance: 0,
                statusRefBalance: 0,
                language: 'ru',
                bots: [],
                usersInvited: [],
                registrationDate: new Date().toLocaleString('en-US', { timeZone: 'Europe/Kiev' }),
                notificationsEnabled: true,
            });
            await db.collection('users').updateOne({ chatId: parseFloat(referrerId) }, { $push: { usersInvited: newUserId } });
            const languageRef = await languageUser(parseFloat(referrerId))
            let messageRef
            if (languageRef === "ru") {
                messageRef = `–ù–∞ –≤–∞—à—É —Å—Å—ã–ª–∫—É –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è (${newUserId}). –°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ`
            } else if (languageRef === "ua") {
                messageRef = `–ù–∞ –≤–∞—à–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞–≤—Å—è (${newUserId}). –î—è–∫—É—é –∑–∞ —Å–ø—ñ–≤–ø—Ä–∞—Ü—é`
            }
            bot.sendMessage(parseFloat(referrerId), messageRef)
            console.log(`–ù–æ–≤—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä ${newUserId} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.`);
        } else {
            console.log("–≠—Ç–æ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.");
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –≤ MongoDB:", error);
    }
}
async function sendTiketForReSellBot(TechnikTask, TestLink, contacts, chatId) {
    const botOptions = await db.collection('botOptions').findOne({});
    const admins = botOptions.admins; // admins —É–∂–µ –º–∞—Å—Å–∏–≤
    let message = `ü§ñ Tiket Resell Bot\n\n–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ :\n\n${TechnikTask}\n\n–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞ : ${TestLink}\n\n–ö–æ–Ω—Ç–∞–∫—Ç—ã :\n\n${contacts}\n\nChat ID: ${chatId}`
    for (let i = 0; i < admins.length; i += 1) {
        const adminId = admins[i];
        bot.sendMessage(adminId, message, {parse_mode: 'Markdown',});
    }
}
async function checkHostingDates() {
    try {
        const botsUserCollection = db.collection('botsUser');

        const hostingDate = new Date();
        const today = hostingDate.toLocaleDateString('en-GB', { timeZone: 'Europe/Kiev' });
        const bots = await botsUserCollection.find({}).toArray();
        hostingDate.setMonth(hostingDate.getMonth() + 1);
        const updatedHosting = hostingDate.toLocaleDateString('en-GB', { timeZone: 'Europe/Kiev' });
        for (let botU of bots) {
            if (botU.hosting === today) {
                if (botU.balanceBot >= 200) {
                    await db.collection('botsUser').findOneAndUpdate({_id: new ObjectId(botU._id)}, {$inc: {balanceBot: -200}})
                    await db.collection('botsUser').findOneAndUpdate({_id: new ObjectId(botU._id)}, {$set: {hosting: updatedHosting}})
                } else {
                    const userId = botU.buyerId
                    const language = await languageUser(userId)
                    let message

                    if (language === 'ru') {
                        message = '*‚ùóÔ∏è –í–∞—à —Ö–æ—Å—Ç–∏–Ω–≥ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è.* \n\n–ß—Ç–æ –±—ã –æ–±–Ω–æ–≤–∏—Ç—å –µ–≥–æ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ —Å—á–µ—Ç –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ "–ü–æ–º–æ—â—å".\n\n_Ps: –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –±–æ—Ç–∞ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–µ –∏ —Ö–æ—Å—Ç–∏–Ω–≥ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø–ª–∞—á–∏–≤–∞—Ç—å—Å—è_'
                    } else if (language === 'ua') {
                        message = '*‚ùóÔ∏è –í–∞—à —Ö–æ—Å—Ç–∏–Ω–≥ –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è.* \n\n–©–æ–± –æ–Ω–æ–≤–∏—Ç–∏ –π–æ–≥–æ, –ø–æ–ø–æ–≤–Ω—ñ—Ç—å —Ä–∞—Ö—É–Ω–æ–∫ —ñ –Ω–∞–ø–∏—à—ñ—Ç—å —É "–î–æ–ø–æ–º–æ–≥–∞".\n\n_Ps: –í–∏ –º–æ–∂–µ—Ç–µ –ø–æ–ø–æ–≤–Ω–∏—Ç–∏ –±–∞–ª–∞–Ω—Å –±–æ—Ç–∞ –≤ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ —ñ —Ö–æ—Å—Ç–∏–Ω–≥ –±—É–¥–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–ø–ª–∞—á—É–≤–∞—Ç–∏—Å—å_'
                    }
                    bot.sendMessage(userId, message, {parse_mode: 'Markdown'})
                    await sendNotificationAboutHostingUser(userId, botU.BID)
                }
            }
        }
    } catch (err) {
        console.error(err);
    }
}
async function sendNotificationAboutHostingUser(chatId, BID) {
    const botOptions = await db.collection('botOptions').findOne({});
    const managers = botOptions.managers; // managers —É–∂–µ –º–∞—Å—Å–∏–≤

    let message =  `–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - ${chatId} –∑–∞–∫–æ–Ω—á–∏–ª—Å—è —Ö–æ—Å—Ç–∏–Ω–≥ –Ω–∞ –±–æ—Ç–∞ ${BID}. –û—Ç–∫–ª—é—á–∏—Ç–µ —Ö–æ—Å—Ç–∏–Ω–≥ –ø–æ–∫–∞ –æ–Ω –Ω–µ –Ω–∞–ø–∏—à–µ—Ç –≤ "–ü–æ–º–æ—â—å"`

    for (let i = 0; i < managers.length; i += 1) {
        const managerId = managers[i];
        bot.sendMessage(managerId, message);
    }
}
cron.schedule('0 9 * * *', () => {
    checkHostingDates();
    console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç —Ö–æ—Å—Ç–∏–Ω–≥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
});

bot.on('polling_error', console.log)